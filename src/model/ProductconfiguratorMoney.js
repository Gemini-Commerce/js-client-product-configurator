/**
 * Product Configurator Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ProductconfiguratorMoney model module.
 * @module model/ProductconfiguratorMoney
 * @version v1
 */
class ProductconfiguratorMoney {
    /**
     * Constructs a new <code>ProductconfiguratorMoney</code>.
     * Represents an amount of money.
     * @alias module:model/ProductconfiguratorMoney
     */
    constructor() { 
        
        ProductconfiguratorMoney.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProductconfiguratorMoney</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProductconfiguratorMoney} obj Optional instance to populate.
     * @return {module:model/ProductconfiguratorMoney} The populated <code>ProductconfiguratorMoney</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProductconfiguratorMoney();

            if (data.hasOwnProperty('units')) {
                obj['units'] = ApiClient.convertToType(data['units'], 'String');
            }
            if (data.hasOwnProperty('micros')) {
                obj['micros'] = ApiClient.convertToType(data['micros'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProductconfiguratorMoney</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProductconfiguratorMoney</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['units'] && !(typeof data['units'] === 'string' || data['units'] instanceof String)) {
            throw new Error("Expected the field `units` to be a primitive type in the JSON string but got " + data['units']);
        }

        return true;
    }


}



/**
 * The whole units of the amount. For example if `currencyCode` is `\"USD\"`, then 1 unit is one US dollar.
 * @member {String} units
 */
ProductconfiguratorMoney.prototype['units'] = undefined;

/**
 * Number of micro (10^-6) units of the amount. The value must be between -999,999 and +999,999 inclusive. If `units` is positive, `micros` must be positive or zero. If `units` is zero, `micros` can be positive, zero, or negative. If `units` is negative, `micros` must be negative or zero. For example $-1.75 is represented as `units`=-1 and `micros`=-750,000.
 * @member {Number} micros
 */
ProductconfiguratorMoney.prototype['micros'] = undefined;






export default ProductconfiguratorMoney;

