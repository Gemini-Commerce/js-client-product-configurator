/**
 * Product Configurator Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ProductconfiguratorPropertyType from './ProductconfiguratorPropertyType';

/**
 * The ConfigurationOptionProperty model module.
 * @module model/ConfigurationOptionProperty
 * @version v1
 */
class ConfigurationOptionProperty {
    /**
     * Constructs a new <code>ConfigurationOptionProperty</code>.
     * @alias module:model/ConfigurationOptionProperty
     */
    constructor() { 
        
        ConfigurationOptionProperty.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConfigurationOptionProperty</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConfigurationOptionProperty} obj Optional instance to populate.
     * @return {module:model/ConfigurationOptionProperty} The populated <code>ConfigurationOptionProperty</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConfigurationOptionProperty();

            if (data.hasOwnProperty('propertyId')) {
                obj['propertyId'] = ApiClient.convertToType(data['propertyId'], 'String');
            }
            if (data.hasOwnProperty('propertyValue')) {
                obj['propertyValue'] = ApiClient.convertToType(data['propertyValue'], 'String');
            }
            if (data.hasOwnProperty('propertyType')) {
                obj['propertyType'] = ProductconfiguratorPropertyType.constructFromObject(data['propertyType']);
            }
            if (data.hasOwnProperty('subtractToGetVariation')) {
                obj['subtractToGetVariation'] = ApiClient.convertToType(data['subtractToGetVariation'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConfigurationOptionProperty</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConfigurationOptionProperty</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['propertyId'] && !(typeof data['propertyId'] === 'string' || data['propertyId'] instanceof String)) {
            throw new Error("Expected the field `propertyId` to be a primitive type in the JSON string but got " + data['propertyId']);
        }
        // ensure the json data is a string
        if (data['propertyValue'] && !(typeof data['propertyValue'] === 'string' || data['propertyValue'] instanceof String)) {
            throw new Error("Expected the field `propertyValue` to be a primitive type in the JSON string but got " + data['propertyValue']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['subtractToGetVariation'])) {
            throw new Error("Expected the field `subtractToGetVariation` to be an array in the JSON data but got " + data['subtractToGetVariation']);
        }

        return true;
    }


}



/**
 * @member {String} propertyId
 */
ConfigurationOptionProperty.prototype['propertyId'] = undefined;

/**
 * @member {String} propertyValue
 */
ConfigurationOptionProperty.prototype['propertyValue'] = undefined;

/**
 * @member {module:model/ProductconfiguratorPropertyType} propertyType
 */
ConfigurationOptionProperty.prototype['propertyType'] = undefined;

/**
 * subtract_to_get_variation is a list of values and is used to calculate the variation from the property value.
 * @member {Array.<String>} subtractToGetVariation
 */
ConfigurationOptionProperty.prototype['subtractToGetVariation'] = undefined;






export default ConfigurationOptionProperty;

