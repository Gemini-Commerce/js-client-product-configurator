/**
 * Product Configurator Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConfigurationConfigurator from './ConfigurationConfigurator';
import ConfigurationProperty from './ConfigurationProperty';
import ConfigurationSelection from './ConfigurationSelection';

/**
 * The ConfigurationGetAvailableConfigurationResponse model module.
 * @module model/ConfigurationGetAvailableConfigurationResponse
 * @version v1
 */
class ConfigurationGetAvailableConfigurationResponse {
    /**
     * Constructs a new <code>ConfigurationGetAvailableConfigurationResponse</code>.
     * @alias module:model/ConfigurationGetAvailableConfigurationResponse
     */
    constructor() { 
        
        ConfigurationGetAvailableConfigurationResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConfigurationGetAvailableConfigurationResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConfigurationGetAvailableConfigurationResponse} obj Optional instance to populate.
     * @return {module:model/ConfigurationGetAvailableConfigurationResponse} The populated <code>ConfigurationGetAvailableConfigurationResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConfigurationGetAvailableConfigurationResponse();

            if (data.hasOwnProperty('configurator')) {
                obj['configurator'] = ConfigurationConfigurator.constructFromObject(data['configurator']);
            }
            if (data.hasOwnProperty('matchedProperties')) {
                obj['matchedProperties'] = ApiClient.convertToType(data['matchedProperties'], [ConfigurationProperty]);
            }
            if (data.hasOwnProperty('selections')) {
                obj['selections'] = ApiClient.convertToType(data['selections'], [ConfigurationSelection]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConfigurationGetAvailableConfigurationResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConfigurationGetAvailableConfigurationResponse</code>.
     */
    static validateJSON(data) {
        // validate the optional field `configurator`
        if (data['configurator']) { // data not null
          ConfigurationConfigurator.validateJSON(data['configurator']);
        }
        if (data['matchedProperties']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['matchedProperties'])) {
                throw new Error("Expected the field `matchedProperties` to be an array in the JSON data but got " + data['matchedProperties']);
            }
            // validate the optional field `matchedProperties` (array)
            for (const item of data['matchedProperties']) {
                ConfigurationProperty.validateJSON(item);
            };
        }
        if (data['selections']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['selections'])) {
                throw new Error("Expected the field `selections` to be an array in the JSON data but got " + data['selections']);
            }
            // validate the optional field `selections` (array)
            for (const item of data['selections']) {
                ConfigurationSelection.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/ConfigurationConfigurator} configurator
 */
ConfigurationGetAvailableConfigurationResponse.prototype['configurator'] = undefined;

/**
 * @member {Array.<module:model/ConfigurationProperty>} matchedProperties
 */
ConfigurationGetAvailableConfigurationResponse.prototype['matchedProperties'] = undefined;

/**
 * @member {Array.<module:model/ConfigurationSelection>} selections
 */
ConfigurationGetAvailableConfigurationResponse.prototype['selections'] = undefined;






export default ConfigurationGetAvailableConfigurationResponse;

