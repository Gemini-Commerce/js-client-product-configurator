/**
 * Product Configurator Service
 * ## Introduction  This comprehensive guide will equip you with the knowledge to integrate and leverage our Product Configurator Service in your applications.  ## Quick Start  Get up and running in no time! Follow these steps to kickstart your integration:  1. **Authentication:** Obtain your integration JWT to authenticate your requests. 2. **Client Libraries:** Explore our GitHub repositories to grab client libraries in your preferred programming language. 3. **API Overview:** Familiarize yourself with our RESTful API using the OpenAPI specification.  ## Integration  ### API Overview  Our RESTful API is the gateway to unlocking the full potential of Product Configurator. Check out the detailed [API Reference](/docs/category/configurator) for a granular understanding of each endpoint and request/response format.  ### Client Libraries  To expedite your integration process, we provide client libraries for various programming languages. Find the one that suits your stack in our [GitHub repositories](https://github.com/Gemini-Commerce).  ### Authentication  Security is paramount. Learn how to authenticate your requests using JWT. This ensures a secure and reliable connection between your application and Product Configurator.  ## Configuration Management  ### Configurator Lifecycle  Understand the lifecycle of configurators, from draft to active and deleted. This flexibility allows you to manage configurations at your own pace.  ### Steps and Options  Configure product steps with ease and define options effortlessly. Explore the power of dependencies to create dynamic and intuitive configurations.  ### Matrices  Delve into matricesâ€”your secret weapon. Explore price and weight matrices, and learn how configured steps influence properties and pricing.  ### Price Management  Unleash dynamic pricing with our versatile price matrices. From fixed prices to incremental structures, adapt to diverse pricing models effortlessly.  ## Security  Your data is in safe hands. Discover how Product Configurator ensures security through JWT authentication, safeguarding your sensitive information.  ## Backward Compatibility  Stay ahead of the curve. Learn about our versioning strategy, providing backward compatibility while allowing our service to evolve seamlessly.  ## Developer Support  Have questions? Need assistance? Write to us at [info@gemini-commerce.com](mailto:info@gemini-commerce.com) and we will get back to you.
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DependencyListDependenciesRequest from '../model/DependencyListDependenciesRequest';
import DependencyListDependenciesResponse from '../model/DependencyListDependenciesResponse';
import GooglerpcStatus from '../model/GooglerpcStatus';
import ProductconfiguratordependencyCreateRequest from '../model/ProductconfiguratordependencyCreateRequest';
import ProductconfiguratordependencyEntity from '../model/ProductconfiguratordependencyEntity';
import ProductconfiguratordependencyUpdateRequest from '../model/ProductconfiguratordependencyUpdateRequest';

/**
* Dependency service.
* @module api/DependencyApi
* @version v1
*/
export default class DependencyApi {

    /**
    * Constructs a new DependencyApi. 
    * @alias module:api/DependencyApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the productConfiguratorCreateDependency operation.
     * @callback module:api/DependencyApi~productConfiguratorCreateDependencyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductconfiguratordependencyEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Dependency
     * Establish a new dependency for an existing step by specifying the tenant and step IDs. Utilize a POST request with the required dependency details in the body to seamlessly enhance the configuration logic of your product.
     * @param {String} tenantId 
     * @param {String} stepId 
     * @param {module:model/ProductconfiguratordependencyCreateRequest} body 
     * @param {module:api/DependencyApi~productConfiguratorCreateDependencyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductconfiguratordependencyEntity}
     */
    productConfiguratorCreateDependency(tenantId, stepId, body, callback) {
      let postBody = body;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling productConfiguratorCreateDependency");
      }
      // verify the required parameter 'stepId' is set
      if (stepId === undefined || stepId === null) {
        throw new Error("Missing the required parameter 'stepId' when calling productConfiguratorCreateDependency");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling productConfiguratorCreateDependency");
      }

      let pathParams = {
        'tenantId': tenantId,
        'stepId': stepId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['standardAuthorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductconfiguratordependencyEntity;
      return this.apiClient.callApi(
        '/v1/{tenantId}/step/{stepId}/dependency/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productConfiguratorDeleteDependency operation.
     * @callback module:api/DependencyApi~productConfiguratorDeleteDependencyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Dependency
     * Remove a specific dependency by specifying the tenant and dependency IDs. Ensure precision in dependency management with a straightforward DELETE request, simplifying the elimination of unwanted configuration logic.
     * @param {String} tenantId 
     * @param {String} dependencyId 
     * @param {module:api/DependencyApi~productConfiguratorDeleteDependencyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    productConfiguratorDeleteDependency(tenantId, dependencyId, callback) {
      let postBody = null;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling productConfiguratorDeleteDependency");
      }
      // verify the required parameter 'dependencyId' is set
      if (dependencyId === undefined || dependencyId === null) {
        throw new Error("Missing the required parameter 'dependencyId' when calling productConfiguratorDeleteDependency");
      }

      let pathParams = {
        'tenantId': tenantId,
        'dependencyId': dependencyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['standardAuthorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/{tenantId}/dependency/{dependencyId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productConfiguratorListDependencies operation.
     * @callback module:api/DependencyApi~productConfiguratorListDependenciesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DependencyListDependenciesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Dependencies
     * Retrieve a list of dependencies based on the specified tenant ID. Customize results by specifying page size for efficient pagination. Submit an empty body to get all dependencies associated with the configurations.
     * @param {String} tenantId 
     * @param {Number} pageSize 
     * @param {module:model/DependencyListDependenciesRequest} body 
     * @param {module:api/DependencyApi~productConfiguratorListDependenciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DependencyListDependenciesResponse}
     */
    productConfiguratorListDependencies(tenantId, pageSize, body, callback) {
      let postBody = body;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling productConfiguratorListDependencies");
      }
      // verify the required parameter 'pageSize' is set
      if (pageSize === undefined || pageSize === null) {
        throw new Error("Missing the required parameter 'pageSize' when calling productConfiguratorListDependencies");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling productConfiguratorListDependencies");
      }

      let pathParams = {
        'tenantId': tenantId,
        'pageSize': pageSize
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['standardAuthorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DependencyListDependenciesResponse;
      return this.apiClient.callApi(
        '/v1/{tenantId}/page-size/{pageSize}/dependencies', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productConfiguratorUpdateDependency operation.
     * @callback module:api/DependencyApi~productConfiguratorUpdateDependencyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductconfiguratordependencyEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Dependency
     * Modify an existing dependency by specifying the tenant and dependency IDs. Utilize a PUT request with updated dependency details in the body for seamless customization and fine-tuning of your product configurations.
     * @param {String} tenantId 
     * @param {String} dependencyId 
     * @param {module:model/ProductconfiguratordependencyUpdateRequest} body 
     * @param {module:api/DependencyApi~productConfiguratorUpdateDependencyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductconfiguratordependencyEntity}
     */
    productConfiguratorUpdateDependency(tenantId, dependencyId, body, callback) {
      let postBody = body;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling productConfiguratorUpdateDependency");
      }
      // verify the required parameter 'dependencyId' is set
      if (dependencyId === undefined || dependencyId === null) {
        throw new Error("Missing the required parameter 'dependencyId' when calling productConfiguratorUpdateDependency");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling productConfiguratorUpdateDependency");
      }

      let pathParams = {
        'tenantId': tenantId,
        'dependencyId': dependencyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['standardAuthorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductconfiguratordependencyEntity;
      return this.apiClient.callApi(
        '/v1/{tenantId}/dependency/{dependencyId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
