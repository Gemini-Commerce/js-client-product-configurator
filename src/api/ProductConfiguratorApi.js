/**
 * Product Configurator Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ConfigurationGetAvailableConfigurationRequest from '../model/ConfigurationGetAvailableConfigurationRequest';
import ConfigurationGetAvailableConfigurationResponse from '../model/ConfigurationGetAvailableConfigurationResponse';
import ConfigurationGetConfigurationFromSelectionsRequest from '../model/ConfigurationGetConfigurationFromSelectionsRequest';
import ConfigurationGetConfigurationFromSelectionsResponse from '../model/ConfigurationGetConfigurationFromSelectionsResponse';
import DependencyListDependenciesRequest from '../model/DependencyListDependenciesRequest';
import DependencyListDependenciesResponse from '../model/DependencyListDependenciesResponse';
import GooglerpcStatus from '../model/GooglerpcStatus';
import MatrixListMatricesRequest from '../model/MatrixListMatricesRequest';
import MatrixListMatricesResponse from '../model/MatrixListMatricesResponse';
import OptionListOptionsRequest from '../model/OptionListOptionsRequest';
import OptionListOptionsResponse from '../model/OptionListOptionsResponse';
import ProductconfiguratorconfiguratorCopyRequest from '../model/ProductconfiguratorconfiguratorCopyRequest';
import ProductconfiguratorconfiguratorEntity from '../model/ProductconfiguratorconfiguratorEntity';
import ProductconfiguratorconfiguratorUpdateRequest from '../model/ProductconfiguratorconfiguratorUpdateRequest';
import ProductconfiguratordependencyCreateRequest from '../model/ProductconfiguratordependencyCreateRequest';
import ProductconfiguratordependencyEntity from '../model/ProductconfiguratordependencyEntity';
import ProductconfiguratordependencyUpdateRequest from '../model/ProductconfiguratordependencyUpdateRequest';
import ProductconfiguratormatrixCreateRequest from '../model/ProductconfiguratormatrixCreateRequest';
import ProductconfiguratormatrixEntity from '../model/ProductconfiguratormatrixEntity';
import ProductconfiguratormatrixUpdateRequest from '../model/ProductconfiguratormatrixUpdateRequest';
import ProductconfiguratoroptionBulkCreateRequest from '../model/ProductconfiguratoroptionBulkCreateRequest';
import ProductconfiguratoroptionBulkCreateResponse from '../model/ProductconfiguratoroptionBulkCreateResponse';
import ProductconfiguratoroptionBulkDeleteRequest from '../model/ProductconfiguratoroptionBulkDeleteRequest';
import ProductconfiguratoroptionBulkUpdateRequest from '../model/ProductconfiguratoroptionBulkUpdateRequest';
import ProductconfiguratoroptionBulkUpdateResponse from '../model/ProductconfiguratoroptionBulkUpdateResponse';
import ProductconfiguratoroptionCopyRequest from '../model/ProductconfiguratoroptionCopyRequest';
import ProductconfiguratoroptionCreateRequest from '../model/ProductconfiguratoroptionCreateRequest';
import ProductconfiguratoroptionEntity from '../model/ProductconfiguratoroptionEntity';
import ProductconfiguratoroptionUpdateRequest from '../model/ProductconfiguratoroptionUpdateRequest';
import ProductconfiguratorpropertyBulkCreateRequest from '../model/ProductconfiguratorpropertyBulkCreateRequest';
import ProductconfiguratorpropertyBulkCreateResponse from '../model/ProductconfiguratorpropertyBulkCreateResponse';
import ProductconfiguratorpropertyBulkUpdateRequest from '../model/ProductconfiguratorpropertyBulkUpdateRequest';
import ProductconfiguratorpropertyBulkUpdateResponse from '../model/ProductconfiguratorpropertyBulkUpdateResponse';
import ProductconfiguratorpropertyCreateRequest from '../model/ProductconfiguratorpropertyCreateRequest';
import ProductconfiguratorpropertyEntity from '../model/ProductconfiguratorpropertyEntity';
import ProductconfiguratorpropertyUpdateRequest from '../model/ProductconfiguratorpropertyUpdateRequest';
import ProductconfiguratorstepBulkCreateRequest from '../model/ProductconfiguratorstepBulkCreateRequest';
import ProductconfiguratorstepBulkCreateResponse from '../model/ProductconfiguratorstepBulkCreateResponse';
import ProductconfiguratorstepBulkDeleteRequest from '../model/ProductconfiguratorstepBulkDeleteRequest';
import ProductconfiguratorstepCopyRequest from '../model/ProductconfiguratorstepCopyRequest';
import ProductconfiguratorstepCreateRequest from '../model/ProductconfiguratorstepCreateRequest';
import ProductconfiguratorstepEntity from '../model/ProductconfiguratorstepEntity';
import ProductconfiguratorstepUpdateRequest from '../model/ProductconfiguratorstepUpdateRequest';
import PropertyListPropertiesRequest from '../model/PropertyListPropertiesRequest';
import PropertyListPropertiesResponse from '../model/PropertyListPropertiesResponse';

/**
* ProductConfigurator service.
* @module api/ProductConfiguratorApi
* @version v1
*/
export default class ProductConfiguratorApi {

    /**
    * Constructs a new ProductConfiguratorApi. 
    * @alias module:api/ProductConfiguratorApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the productConfiguratorBulkCreateOptions operation.
     * @callback module:api/ProductConfiguratorApi~productConfiguratorBulkCreateOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductconfiguratoroptionBulkCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} tenantId 
     * @param {String} stepId 
     * @param {module:model/ProductconfiguratoroptionBulkCreateRequest} body 
     * @param {module:api/ProductConfiguratorApi~productConfiguratorBulkCreateOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductconfiguratoroptionBulkCreateResponse}
     */
    productConfiguratorBulkCreateOptions(tenantId, stepId, body, callback) {
      let postBody = body;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling productConfiguratorBulkCreateOptions");
      }
      // verify the required parameter 'stepId' is set
      if (stepId === undefined || stepId === null) {
        throw new Error("Missing the required parameter 'stepId' when calling productConfiguratorBulkCreateOptions");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling productConfiguratorBulkCreateOptions");
      }

      let pathParams = {
        'tenantId': tenantId,
        'stepId': stepId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductconfiguratoroptionBulkCreateResponse;
      return this.apiClient.callApi(
        '/v1/{tenantId}/step/{stepId}/option/create/bulk', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productConfiguratorBulkCreateProperties operation.
     * @callback module:api/ProductConfiguratorApi~productConfiguratorBulkCreatePropertiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductconfiguratorpropertyBulkCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} tenantId 
     * @param {module:model/ProductconfiguratorpropertyBulkCreateRequest} body 
     * @param {module:api/ProductConfiguratorApi~productConfiguratorBulkCreatePropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductconfiguratorpropertyBulkCreateResponse}
     */
    productConfiguratorBulkCreateProperties(tenantId, body, callback) {
      let postBody = body;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling productConfiguratorBulkCreateProperties");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling productConfiguratorBulkCreateProperties");
      }

      let pathParams = {
        'tenantId': tenantId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductconfiguratorpropertyBulkCreateResponse;
      return this.apiClient.callApi(
        '/v1/{tenantId}/property/create/bulk', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productConfiguratorBulkCreateSteps operation.
     * @callback module:api/ProductConfiguratorApi~productConfiguratorBulkCreateStepsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductconfiguratorstepBulkCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} tenantId 
     * @param {String} configuratorId 
     * @param {module:model/ProductconfiguratorstepBulkCreateRequest} body 
     * @param {module:api/ProductConfiguratorApi~productConfiguratorBulkCreateStepsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductconfiguratorstepBulkCreateResponse}
     */
    productConfiguratorBulkCreateSteps(tenantId, configuratorId, body, callback) {
      let postBody = body;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling productConfiguratorBulkCreateSteps");
      }
      // verify the required parameter 'configuratorId' is set
      if (configuratorId === undefined || configuratorId === null) {
        throw new Error("Missing the required parameter 'configuratorId' when calling productConfiguratorBulkCreateSteps");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling productConfiguratorBulkCreateSteps");
      }

      let pathParams = {
        'tenantId': tenantId,
        'configuratorId': configuratorId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductconfiguratorstepBulkCreateResponse;
      return this.apiClient.callApi(
        '/v1/{tenantId}/configurator/{configuratorId}/step/create/bulk', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productConfiguratorBulkDeleteOptions operation.
     * @callback module:api/ProductConfiguratorApi~productConfiguratorBulkDeleteOptionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} tenantId 
     * @param {module:model/ProductconfiguratoroptionBulkDeleteRequest} body 
     * @param {module:api/ProductConfiguratorApi~productConfiguratorBulkDeleteOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    productConfiguratorBulkDeleteOptions(tenantId, body, callback) {
      let postBody = body;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling productConfiguratorBulkDeleteOptions");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling productConfiguratorBulkDeleteOptions");
      }

      let pathParams = {
        'tenantId': tenantId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/{tenantId}/option/delete/bulk', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productConfiguratorBulkDeleteSteps operation.
     * @callback module:api/ProductConfiguratorApi~productConfiguratorBulkDeleteStepsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} tenantId 
     * @param {module:model/ProductconfiguratorstepBulkDeleteRequest} body 
     * @param {module:api/ProductConfiguratorApi~productConfiguratorBulkDeleteStepsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    productConfiguratorBulkDeleteSteps(tenantId, body, callback) {
      let postBody = body;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling productConfiguratorBulkDeleteSteps");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling productConfiguratorBulkDeleteSteps");
      }

      let pathParams = {
        'tenantId': tenantId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/{tenantId}/step/delete/bulk', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productConfiguratorBulkUpdateOptions operation.
     * @callback module:api/ProductConfiguratorApi~productConfiguratorBulkUpdateOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductconfiguratoroptionBulkUpdateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} tenantId 
     * @param {module:model/ProductconfiguratoroptionBulkUpdateRequest} body 
     * @param {module:api/ProductConfiguratorApi~productConfiguratorBulkUpdateOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductconfiguratoroptionBulkUpdateResponse}
     */
    productConfiguratorBulkUpdateOptions(tenantId, body, callback) {
      let postBody = body;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling productConfiguratorBulkUpdateOptions");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling productConfiguratorBulkUpdateOptions");
      }

      let pathParams = {
        'tenantId': tenantId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductconfiguratoroptionBulkUpdateResponse;
      return this.apiClient.callApi(
        '/v1/{tenantId}/option/bulk', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productConfiguratorBulkUpdateProperties operation.
     * @callback module:api/ProductConfiguratorApi~productConfiguratorBulkUpdatePropertiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductconfiguratorpropertyBulkUpdateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} tenantId 
     * @param {module:model/ProductconfiguratorpropertyBulkUpdateRequest} body 
     * @param {module:api/ProductConfiguratorApi~productConfiguratorBulkUpdatePropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductconfiguratorpropertyBulkUpdateResponse}
     */
    productConfiguratorBulkUpdateProperties(tenantId, body, callback) {
      let postBody = body;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling productConfiguratorBulkUpdateProperties");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling productConfiguratorBulkUpdateProperties");
      }

      let pathParams = {
        'tenantId': tenantId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductconfiguratorpropertyBulkUpdateResponse;
      return this.apiClient.callApi(
        '/v1/{tenantId}/properties/bulk', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productConfiguratorCopyConfigurator operation.
     * @callback module:api/ProductConfiguratorApi~productConfiguratorCopyConfiguratorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductconfiguratorconfiguratorEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} tenantId 
     * @param {String} sourceConfiguratorId 
     * @param {module:model/ProductconfiguratorconfiguratorCopyRequest} body 
     * @param {module:api/ProductConfiguratorApi~productConfiguratorCopyConfiguratorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductconfiguratorconfiguratorEntity}
     */
    productConfiguratorCopyConfigurator(tenantId, sourceConfiguratorId, body, callback) {
      let postBody = body;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling productConfiguratorCopyConfigurator");
      }
      // verify the required parameter 'sourceConfiguratorId' is set
      if (sourceConfiguratorId === undefined || sourceConfiguratorId === null) {
        throw new Error("Missing the required parameter 'sourceConfiguratorId' when calling productConfiguratorCopyConfigurator");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling productConfiguratorCopyConfigurator");
      }

      let pathParams = {
        'tenantId': tenantId,
        'sourceConfiguratorId': sourceConfiguratorId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductconfiguratorconfiguratorEntity;
      return this.apiClient.callApi(
        '/v1/{tenantId}/product/{sourceConfiguratorId}/copy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productConfiguratorCopyOption operation.
     * @callback module:api/ProductConfiguratorApi~productConfiguratorCopyOptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductconfiguratoroptionEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} tenantId 
     * @param {String} sourceOptionId 
     * @param {module:model/ProductconfiguratoroptionCopyRequest} body 
     * @param {module:api/ProductConfiguratorApi~productConfiguratorCopyOptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductconfiguratoroptionEntity}
     */
    productConfiguratorCopyOption(tenantId, sourceOptionId, body, callback) {
      let postBody = body;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling productConfiguratorCopyOption");
      }
      // verify the required parameter 'sourceOptionId' is set
      if (sourceOptionId === undefined || sourceOptionId === null) {
        throw new Error("Missing the required parameter 'sourceOptionId' when calling productConfiguratorCopyOption");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling productConfiguratorCopyOption");
      }

      let pathParams = {
        'tenantId': tenantId,
        'sourceOptionId': sourceOptionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductconfiguratoroptionEntity;
      return this.apiClient.callApi(
        '/v1/{tenantId}/option/{sourceOptionId}/copy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productConfiguratorCopyStep operation.
     * @callback module:api/ProductConfiguratorApi~productConfiguratorCopyStepCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductconfiguratorstepEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} tenantId 
     * @param {String} sourceStepId 
     * @param {module:model/ProductconfiguratorstepCopyRequest} body 
     * @param {module:api/ProductConfiguratorApi~productConfiguratorCopyStepCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductconfiguratorstepEntity}
     */
    productConfiguratorCopyStep(tenantId, sourceStepId, body, callback) {
      let postBody = body;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling productConfiguratorCopyStep");
      }
      // verify the required parameter 'sourceStepId' is set
      if (sourceStepId === undefined || sourceStepId === null) {
        throw new Error("Missing the required parameter 'sourceStepId' when calling productConfiguratorCopyStep");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling productConfiguratorCopyStep");
      }

      let pathParams = {
        'tenantId': tenantId,
        'sourceStepId': sourceStepId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductconfiguratorstepEntity;
      return this.apiClient.callApi(
        '/v1/{tenantId}/step/{sourceStepId}/copy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productConfiguratorCreateDependency operation.
     * @callback module:api/ProductConfiguratorApi~productConfiguratorCreateDependencyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductconfiguratordependencyEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} tenantId 
     * @param {String} stepId 
     * @param {module:model/ProductconfiguratordependencyCreateRequest} body 
     * @param {module:api/ProductConfiguratorApi~productConfiguratorCreateDependencyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductconfiguratordependencyEntity}
     */
    productConfiguratorCreateDependency(tenantId, stepId, body, callback) {
      let postBody = body;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling productConfiguratorCreateDependency");
      }
      // verify the required parameter 'stepId' is set
      if (stepId === undefined || stepId === null) {
        throw new Error("Missing the required parameter 'stepId' when calling productConfiguratorCreateDependency");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling productConfiguratorCreateDependency");
      }

      let pathParams = {
        'tenantId': tenantId,
        'stepId': stepId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductconfiguratordependencyEntity;
      return this.apiClient.callApi(
        '/v1/{tenantId}/step/{stepId}/dependency/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productConfiguratorCreateMatrix operation.
     * @callback module:api/ProductConfiguratorApi~productConfiguratorCreateMatrixCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductconfiguratormatrixEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} tenantId 
     * @param {module:model/ProductconfiguratormatrixCreateRequest} body 
     * @param {module:api/ProductConfiguratorApi~productConfiguratorCreateMatrixCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductconfiguratormatrixEntity}
     */
    productConfiguratorCreateMatrix(tenantId, body, callback) {
      let postBody = body;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling productConfiguratorCreateMatrix");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling productConfiguratorCreateMatrix");
      }

      let pathParams = {
        'tenantId': tenantId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductconfiguratormatrixEntity;
      return this.apiClient.callApi(
        '/v1/{tenantId}/matrix/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productConfiguratorCreateOption operation.
     * @callback module:api/ProductConfiguratorApi~productConfiguratorCreateOptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductconfiguratoroptionEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} tenantId 
     * @param {String} stepId 
     * @param {module:model/ProductconfiguratoroptionCreateRequest} body 
     * @param {module:api/ProductConfiguratorApi~productConfiguratorCreateOptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductconfiguratoroptionEntity}
     */
    productConfiguratorCreateOption(tenantId, stepId, body, callback) {
      let postBody = body;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling productConfiguratorCreateOption");
      }
      // verify the required parameter 'stepId' is set
      if (stepId === undefined || stepId === null) {
        throw new Error("Missing the required parameter 'stepId' when calling productConfiguratorCreateOption");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling productConfiguratorCreateOption");
      }

      let pathParams = {
        'tenantId': tenantId,
        'stepId': stepId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductconfiguratoroptionEntity;
      return this.apiClient.callApi(
        '/v1/{tenantId}/step/{stepId}/option/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productConfiguratorCreateProperty operation.
     * @callback module:api/ProductConfiguratorApi~productConfiguratorCreatePropertyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductconfiguratorpropertyEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} tenantId 
     * @param {module:model/ProductconfiguratorpropertyCreateRequest} body 
     * @param {module:api/ProductConfiguratorApi~productConfiguratorCreatePropertyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductconfiguratorpropertyEntity}
     */
    productConfiguratorCreateProperty(tenantId, body, callback) {
      let postBody = body;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling productConfiguratorCreateProperty");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling productConfiguratorCreateProperty");
      }

      let pathParams = {
        'tenantId': tenantId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductconfiguratorpropertyEntity;
      return this.apiClient.callApi(
        '/v1/{tenantId}/property/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productConfiguratorCreateStep operation.
     * @callback module:api/ProductConfiguratorApi~productConfiguratorCreateStepCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductconfiguratorstepEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} tenantId 
     * @param {String} configuratorId 
     * @param {module:model/ProductconfiguratorstepCreateRequest} body 
     * @param {module:api/ProductConfiguratorApi~productConfiguratorCreateStepCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductconfiguratorstepEntity}
     */
    productConfiguratorCreateStep(tenantId, configuratorId, body, callback) {
      let postBody = body;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling productConfiguratorCreateStep");
      }
      // verify the required parameter 'configuratorId' is set
      if (configuratorId === undefined || configuratorId === null) {
        throw new Error("Missing the required parameter 'configuratorId' when calling productConfiguratorCreateStep");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling productConfiguratorCreateStep");
      }

      let pathParams = {
        'tenantId': tenantId,
        'configuratorId': configuratorId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductconfiguratorstepEntity;
      return this.apiClient.callApi(
        '/v1/{tenantId}/configurator/{configuratorId}/step/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productConfiguratorDeleteConfigurator operation.
     * @callback module:api/ProductConfiguratorApi~productConfiguratorDeleteConfiguratorCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} tenantId 
     * @param {String} configuratorId 
     * @param {module:api/ProductConfiguratorApi~productConfiguratorDeleteConfiguratorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    productConfiguratorDeleteConfigurator(tenantId, configuratorId, callback) {
      let postBody = null;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling productConfiguratorDeleteConfigurator");
      }
      // verify the required parameter 'configuratorId' is set
      if (configuratorId === undefined || configuratorId === null) {
        throw new Error("Missing the required parameter 'configuratorId' when calling productConfiguratorDeleteConfigurator");
      }

      let pathParams = {
        'tenantId': tenantId,
        'configuratorId': configuratorId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/{tenantId}/configurator/{configuratorId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productConfiguratorDeleteDependency operation.
     * @callback module:api/ProductConfiguratorApi~productConfiguratorDeleteDependencyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} tenantId 
     * @param {String} dependencyId 
     * @param {module:api/ProductConfiguratorApi~productConfiguratorDeleteDependencyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    productConfiguratorDeleteDependency(tenantId, dependencyId, callback) {
      let postBody = null;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling productConfiguratorDeleteDependency");
      }
      // verify the required parameter 'dependencyId' is set
      if (dependencyId === undefined || dependencyId === null) {
        throw new Error("Missing the required parameter 'dependencyId' when calling productConfiguratorDeleteDependency");
      }

      let pathParams = {
        'tenantId': tenantId,
        'dependencyId': dependencyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/{tenantId}/dependency/{dependencyId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productConfiguratorDeleteMatrix operation.
     * @callback module:api/ProductConfiguratorApi~productConfiguratorDeleteMatrixCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} tenantId 
     * @param {String} matrixId 
     * @param {module:api/ProductConfiguratorApi~productConfiguratorDeleteMatrixCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    productConfiguratorDeleteMatrix(tenantId, matrixId, callback) {
      let postBody = null;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling productConfiguratorDeleteMatrix");
      }
      // verify the required parameter 'matrixId' is set
      if (matrixId === undefined || matrixId === null) {
        throw new Error("Missing the required parameter 'matrixId' when calling productConfiguratorDeleteMatrix");
      }

      let pathParams = {
        'tenantId': tenantId,
        'matrixId': matrixId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/{tenantId}/matrix/{matrixId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productConfiguratorDeleteOption operation.
     * @callback module:api/ProductConfiguratorApi~productConfiguratorDeleteOptionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} tenantId 
     * @param {String} optionId 
     * @param {module:api/ProductConfiguratorApi~productConfiguratorDeleteOptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    productConfiguratorDeleteOption(tenantId, optionId, callback) {
      let postBody = null;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling productConfiguratorDeleteOption");
      }
      // verify the required parameter 'optionId' is set
      if (optionId === undefined || optionId === null) {
        throw new Error("Missing the required parameter 'optionId' when calling productConfiguratorDeleteOption");
      }

      let pathParams = {
        'tenantId': tenantId,
        'optionId': optionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/{tenantId}/option/{optionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productConfiguratorDeleteStep operation.
     * @callback module:api/ProductConfiguratorApi~productConfiguratorDeleteStepCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} tenantId 
     * @param {String} stepId 
     * @param {module:api/ProductConfiguratorApi~productConfiguratorDeleteStepCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    productConfiguratorDeleteStep(tenantId, stepId, callback) {
      let postBody = null;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling productConfiguratorDeleteStep");
      }
      // verify the required parameter 'stepId' is set
      if (stepId === undefined || stepId === null) {
        throw new Error("Missing the required parameter 'stepId' when calling productConfiguratorDeleteStep");
      }

      let pathParams = {
        'tenantId': tenantId,
        'stepId': stepId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/{tenantId}/step/{stepId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productConfiguratorGetAvailableConfiguration operation.
     * @callback module:api/ProductConfiguratorApi~productConfiguratorGetAvailableConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConfigurationGetAvailableConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} tenantId 
     * @param {String} productId 
     * @param {Object} opts Optional parameters
     * @param {String} [configuratorId] 
     * @param {module:api/ProductConfiguratorApi~productConfiguratorGetAvailableConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConfigurationGetAvailableConfigurationResponse}
     */
    productConfiguratorGetAvailableConfiguration(tenantId, productId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling productConfiguratorGetAvailableConfiguration");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling productConfiguratorGetAvailableConfiguration");
      }

      let pathParams = {
        'tenantId': tenantId,
        'productId': productId
      };
      let queryParams = {
        'configuratorId': opts['configuratorId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConfigurationGetAvailableConfigurationResponse;
      return this.apiClient.callApi(
        '/v1/{tenantId}/product/{productId}/configuration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productConfiguratorGetAvailableConfiguration2 operation.
     * @callback module:api/ProductConfiguratorApi~productConfiguratorGetAvailableConfiguration2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ConfigurationGetAvailableConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} tenantId 
     * @param {String} productId 
     * @param {module:model/ConfigurationGetAvailableConfigurationRequest} body 
     * @param {module:api/ProductConfiguratorApi~productConfiguratorGetAvailableConfiguration2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConfigurationGetAvailableConfigurationResponse}
     */
    productConfiguratorGetAvailableConfiguration2(tenantId, productId, body, callback) {
      let postBody = body;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling productConfiguratorGetAvailableConfiguration2");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling productConfiguratorGetAvailableConfiguration2");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling productConfiguratorGetAvailableConfiguration2");
      }

      let pathParams = {
        'tenantId': tenantId,
        'productId': productId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConfigurationGetAvailableConfigurationResponse;
      return this.apiClient.callApi(
        '/v1/{tenantId}/product/{productId}/configuration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productConfiguratorGetConfigurationFromSelections operation.
     * @callback module:api/ProductConfiguratorApi~productConfiguratorGetConfigurationFromSelectionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConfigurationGetConfigurationFromSelectionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} tenantId 
     * @param {String} productId 
     * @param {module:model/ConfigurationGetConfigurationFromSelectionsRequest} body 
     * @param {module:api/ProductConfiguratorApi~productConfiguratorGetConfigurationFromSelectionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConfigurationGetConfigurationFromSelectionsResponse}
     */
    productConfiguratorGetConfigurationFromSelections(tenantId, productId, body, callback) {
      let postBody = body;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling productConfiguratorGetConfigurationFromSelections");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling productConfiguratorGetConfigurationFromSelections");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling productConfiguratorGetConfigurationFromSelections");
      }

      let pathParams = {
        'tenantId': tenantId,
        'productId': productId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConfigurationGetConfigurationFromSelectionsResponse;
      return this.apiClient.callApi(
        '/v1/{tenantId}/product/{productId}/configuration-from-selections', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productConfiguratorGetMatrix operation.
     * @callback module:api/ProductConfiguratorApi~productConfiguratorGetMatrixCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductconfiguratormatrixEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} tenantId 
     * @param {String} matrixId 
     * @param {module:api/ProductConfiguratorApi~productConfiguratorGetMatrixCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductconfiguratormatrixEntity}
     */
    productConfiguratorGetMatrix(tenantId, matrixId, callback) {
      let postBody = null;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling productConfiguratorGetMatrix");
      }
      // verify the required parameter 'matrixId' is set
      if (matrixId === undefined || matrixId === null) {
        throw new Error("Missing the required parameter 'matrixId' when calling productConfiguratorGetMatrix");
      }

      let pathParams = {
        'tenantId': tenantId,
        'matrixId': matrixId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductconfiguratormatrixEntity;
      return this.apiClient.callApi(
        '/v1/{tenantId}/matrix/{matrixId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productConfiguratorListDependencies operation.
     * @callback module:api/ProductConfiguratorApi~productConfiguratorListDependenciesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DependencyListDependenciesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} tenantId 
     * @param {Number} pageSize 
     * @param {module:model/DependencyListDependenciesRequest} body 
     * @param {module:api/ProductConfiguratorApi~productConfiguratorListDependenciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DependencyListDependenciesResponse}
     */
    productConfiguratorListDependencies(tenantId, pageSize, body, callback) {
      let postBody = body;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling productConfiguratorListDependencies");
      }
      // verify the required parameter 'pageSize' is set
      if (pageSize === undefined || pageSize === null) {
        throw new Error("Missing the required parameter 'pageSize' when calling productConfiguratorListDependencies");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling productConfiguratorListDependencies");
      }

      let pathParams = {
        'tenantId': tenantId,
        'pageSize': pageSize
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DependencyListDependenciesResponse;
      return this.apiClient.callApi(
        '/v1/{tenantId}/page-size/{pageSize}/dependencies', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productConfiguratorListMatrices operation.
     * @callback module:api/ProductConfiguratorApi~productConfiguratorListMatricesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MatrixListMatricesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} tenantId 
     * @param {String} configuratorId 
     * @param {String} pageSize 
     * @param {module:model/MatrixListMatricesRequest} body 
     * @param {module:api/ProductConfiguratorApi~productConfiguratorListMatricesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MatrixListMatricesResponse}
     */
    productConfiguratorListMatrices(tenantId, configuratorId, pageSize, body, callback) {
      let postBody = body;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling productConfiguratorListMatrices");
      }
      // verify the required parameter 'configuratorId' is set
      if (configuratorId === undefined || configuratorId === null) {
        throw new Error("Missing the required parameter 'configuratorId' when calling productConfiguratorListMatrices");
      }
      // verify the required parameter 'pageSize' is set
      if (pageSize === undefined || pageSize === null) {
        throw new Error("Missing the required parameter 'pageSize' when calling productConfiguratorListMatrices");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling productConfiguratorListMatrices");
      }

      let pathParams = {
        'tenantId': tenantId,
        'configuratorId': configuratorId,
        'pageSize': pageSize
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MatrixListMatricesResponse;
      return this.apiClient.callApi(
        '/v1/{tenantId}/configurator/{configuratorId}/page-size/{pageSize}/matrices', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productConfiguratorListOptions operation.
     * @callback module:api/ProductConfiguratorApi~productConfiguratorListOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OptionListOptionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} tenantId 
     * @param {String} stepId 
     * @param {Number} pageSize 
     * @param {module:model/OptionListOptionsRequest} body 
     * @param {module:api/ProductConfiguratorApi~productConfiguratorListOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OptionListOptionsResponse}
     */
    productConfiguratorListOptions(tenantId, stepId, pageSize, body, callback) {
      let postBody = body;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling productConfiguratorListOptions");
      }
      // verify the required parameter 'stepId' is set
      if (stepId === undefined || stepId === null) {
        throw new Error("Missing the required parameter 'stepId' when calling productConfiguratorListOptions");
      }
      // verify the required parameter 'pageSize' is set
      if (pageSize === undefined || pageSize === null) {
        throw new Error("Missing the required parameter 'pageSize' when calling productConfiguratorListOptions");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling productConfiguratorListOptions");
      }

      let pathParams = {
        'tenantId': tenantId,
        'stepId': stepId,
        'pageSize': pageSize
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OptionListOptionsResponse;
      return this.apiClient.callApi(
        '/v1/{tenantId}/step/{stepId}/page-size/{pageSize}/options', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productConfiguratorListProperties operation.
     * @callback module:api/ProductConfiguratorApi~productConfiguratorListPropertiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PropertyListPropertiesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} tenantId 
     * @param {String} matrixId 
     * @param {String} pageSize 
     * @param {module:model/PropertyListPropertiesRequest} body 
     * @param {module:api/ProductConfiguratorApi~productConfiguratorListPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PropertyListPropertiesResponse}
     */
    productConfiguratorListProperties(tenantId, matrixId, pageSize, body, callback) {
      let postBody = body;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling productConfiguratorListProperties");
      }
      // verify the required parameter 'matrixId' is set
      if (matrixId === undefined || matrixId === null) {
        throw new Error("Missing the required parameter 'matrixId' when calling productConfiguratorListProperties");
      }
      // verify the required parameter 'pageSize' is set
      if (pageSize === undefined || pageSize === null) {
        throw new Error("Missing the required parameter 'pageSize' when calling productConfiguratorListProperties");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling productConfiguratorListProperties");
      }

      let pathParams = {
        'tenantId': tenantId,
        'matrixId': matrixId,
        'pageSize': pageSize
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PropertyListPropertiesResponse;
      return this.apiClient.callApi(
        '/v1/{tenantId}/matrix/{matrixId}/page-size/{pageSize}/properties', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productConfiguratorRemovePricelistFromMatrix operation.
     * @callback module:api/ProductConfiguratorApi~productConfiguratorRemovePricelistFromMatrixCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductconfiguratormatrixEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} tenantId 
     * @param {String} matrixId 
     * @param {String} pricelistGrn 
     * @param {module:api/ProductConfiguratorApi~productConfiguratorRemovePricelistFromMatrixCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductconfiguratormatrixEntity}
     */
    productConfiguratorRemovePricelistFromMatrix(tenantId, matrixId, pricelistGrn, callback) {
      let postBody = null;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling productConfiguratorRemovePricelistFromMatrix");
      }
      // verify the required parameter 'matrixId' is set
      if (matrixId === undefined || matrixId === null) {
        throw new Error("Missing the required parameter 'matrixId' when calling productConfiguratorRemovePricelistFromMatrix");
      }
      // verify the required parameter 'pricelistGrn' is set
      if (pricelistGrn === undefined || pricelistGrn === null) {
        throw new Error("Missing the required parameter 'pricelistGrn' when calling productConfiguratorRemovePricelistFromMatrix");
      }

      let pathParams = {
        'tenantId': tenantId,
        'matrixId': matrixId,
        'pricelistGrn': pricelistGrn
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductconfiguratormatrixEntity;
      return this.apiClient.callApi(
        '/v1/{tenantId}/matrix/{matrixId}/pricelist/{pricelistGrn}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productConfiguratorUpdateConfigurator operation.
     * @callback module:api/ProductConfiguratorApi~productConfiguratorUpdateConfiguratorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductconfiguratorconfiguratorEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} tenantId 
     * @param {String} configuratorId 
     * @param {module:model/ProductconfiguratorconfiguratorUpdateRequest} body 
     * @param {module:api/ProductConfiguratorApi~productConfiguratorUpdateConfiguratorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductconfiguratorconfiguratorEntity}
     */
    productConfiguratorUpdateConfigurator(tenantId, configuratorId, body, callback) {
      let postBody = body;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling productConfiguratorUpdateConfigurator");
      }
      // verify the required parameter 'configuratorId' is set
      if (configuratorId === undefined || configuratorId === null) {
        throw new Error("Missing the required parameter 'configuratorId' when calling productConfiguratorUpdateConfigurator");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling productConfiguratorUpdateConfigurator");
      }

      let pathParams = {
        'tenantId': tenantId,
        'configuratorId': configuratorId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductconfiguratorconfiguratorEntity;
      return this.apiClient.callApi(
        '/v1/{tenantId}/configurator/{configuratorId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productConfiguratorUpdateDependency operation.
     * @callback module:api/ProductConfiguratorApi~productConfiguratorUpdateDependencyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductconfiguratordependencyEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} tenantId 
     * @param {String} dependencyId 
     * @param {module:model/ProductconfiguratordependencyUpdateRequest} body 
     * @param {module:api/ProductConfiguratorApi~productConfiguratorUpdateDependencyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductconfiguratordependencyEntity}
     */
    productConfiguratorUpdateDependency(tenantId, dependencyId, body, callback) {
      let postBody = body;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling productConfiguratorUpdateDependency");
      }
      // verify the required parameter 'dependencyId' is set
      if (dependencyId === undefined || dependencyId === null) {
        throw new Error("Missing the required parameter 'dependencyId' when calling productConfiguratorUpdateDependency");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling productConfiguratorUpdateDependency");
      }

      let pathParams = {
        'tenantId': tenantId,
        'dependencyId': dependencyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductconfiguratordependencyEntity;
      return this.apiClient.callApi(
        '/v1/{tenantId}/dependency/{dependencyId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productConfiguratorUpdateMatrix operation.
     * @callback module:api/ProductConfiguratorApi~productConfiguratorUpdateMatrixCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductconfiguratormatrixEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} tenantId 
     * @param {String} matrixId 
     * @param {module:model/ProductconfiguratormatrixUpdateRequest} body 
     * @param {module:api/ProductConfiguratorApi~productConfiguratorUpdateMatrixCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductconfiguratormatrixEntity}
     */
    productConfiguratorUpdateMatrix(tenantId, matrixId, body, callback) {
      let postBody = body;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling productConfiguratorUpdateMatrix");
      }
      // verify the required parameter 'matrixId' is set
      if (matrixId === undefined || matrixId === null) {
        throw new Error("Missing the required parameter 'matrixId' when calling productConfiguratorUpdateMatrix");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling productConfiguratorUpdateMatrix");
      }

      let pathParams = {
        'tenantId': tenantId,
        'matrixId': matrixId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductconfiguratormatrixEntity;
      return this.apiClient.callApi(
        '/v1/{tenantId}/matrix/{matrixId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productConfiguratorUpdateOption operation.
     * @callback module:api/ProductConfiguratorApi~productConfiguratorUpdateOptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductconfiguratoroptionEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} tenantId 
     * @param {String} optionId 
     * @param {module:model/ProductconfiguratoroptionUpdateRequest} body 
     * @param {module:api/ProductConfiguratorApi~productConfiguratorUpdateOptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductconfiguratoroptionEntity}
     */
    productConfiguratorUpdateOption(tenantId, optionId, body, callback) {
      let postBody = body;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling productConfiguratorUpdateOption");
      }
      // verify the required parameter 'optionId' is set
      if (optionId === undefined || optionId === null) {
        throw new Error("Missing the required parameter 'optionId' when calling productConfiguratorUpdateOption");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling productConfiguratorUpdateOption");
      }

      let pathParams = {
        'tenantId': tenantId,
        'optionId': optionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductconfiguratoroptionEntity;
      return this.apiClient.callApi(
        '/v1/{tenantId}/option/{optionId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productConfiguratorUpdateProperty operation.
     * @callback module:api/ProductConfiguratorApi~productConfiguratorUpdatePropertyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductconfiguratorpropertyEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} tenantId 
     * @param {String} propertyId 
     * @param {module:model/ProductconfiguratorpropertyUpdateRequest} body 
     * @param {module:api/ProductConfiguratorApi~productConfiguratorUpdatePropertyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductconfiguratorpropertyEntity}
     */
    productConfiguratorUpdateProperty(tenantId, propertyId, body, callback) {
      let postBody = body;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling productConfiguratorUpdateProperty");
      }
      // verify the required parameter 'propertyId' is set
      if (propertyId === undefined || propertyId === null) {
        throw new Error("Missing the required parameter 'propertyId' when calling productConfiguratorUpdateProperty");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling productConfiguratorUpdateProperty");
      }

      let pathParams = {
        'tenantId': tenantId,
        'propertyId': propertyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductconfiguratorpropertyEntity;
      return this.apiClient.callApi(
        '/v1/{tenantId}/property/{propertyId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productConfiguratorUpdateStep operation.
     * @callback module:api/ProductConfiguratorApi~productConfiguratorUpdateStepCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductconfiguratorstepEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} tenantId 
     * @param {String} stepId 
     * @param {module:model/ProductconfiguratorstepUpdateRequest} body 
     * @param {module:api/ProductConfiguratorApi~productConfiguratorUpdateStepCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductconfiguratorstepEntity}
     */
    productConfiguratorUpdateStep(tenantId, stepId, body, callback) {
      let postBody = body;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling productConfiguratorUpdateStep");
      }
      // verify the required parameter 'stepId' is set
      if (stepId === undefined || stepId === null) {
        throw new Error("Missing the required parameter 'stepId' when calling productConfiguratorUpdateStep");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling productConfiguratorUpdateStep");
      }

      let pathParams = {
        'tenantId': tenantId,
        'stepId': stepId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductconfiguratorstepEntity;
      return this.apiClient.callApi(
        '/v1/{tenantId}/step/{stepId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
