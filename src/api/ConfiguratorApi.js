/**
 * Product Configurator Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ConfiguratorListRequest from '../model/ConfiguratorListRequest';
import ConfiguratorListResponse from '../model/ConfiguratorListResponse';
import GooglerpcStatus from '../model/GooglerpcStatus';
import ProductconfiguratorconfiguratorCreateRequest from '../model/ProductconfiguratorconfiguratorCreateRequest';
import ProductconfiguratorconfiguratorEntity from '../model/ProductconfiguratorconfiguratorEntity';

/**
* Configurator service.
* @module api/ConfiguratorApi
* @version v1
*/
export default class ConfiguratorApi {

    /**
    * Constructs a new ConfiguratorApi. 
    * @alias module:api/ConfiguratorApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the productConfiguratorCreateConfigurator operation.
     * @callback module:api/ConfiguratorApi~productConfiguratorCreateConfiguratorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductconfiguratorconfiguratorCreateRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Product Configurator
     * Create a new product configurator.
     * @param {String} tenantId 
     * @param {String} productId 
     * @param {module:model/ProductconfiguratorconfiguratorCreateRequest} body 
     * @param {module:api/ConfiguratorApi~productConfiguratorCreateConfiguratorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductconfiguratorconfiguratorCreateRequest}
     */
    productConfiguratorCreateConfigurator(tenantId, productId, body, callback) {
      let postBody = body;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling productConfiguratorCreateConfigurator");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling productConfiguratorCreateConfigurator");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling productConfiguratorCreateConfigurator");
      }

      let pathParams = {
        'tenantId': tenantId,
        'productId': productId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['standardAuthorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductconfiguratorconfiguratorCreateRequest;
      return this.apiClient.callApi(
        '/v1/{tenantId}/product/{productId}/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productConfiguratorGetConfiguratorByProductId operation.
     * @callback module:api/ConfiguratorApi~productConfiguratorGetConfiguratorByProductIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductconfiguratorconfiguratorEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Product Configurator by Product ID
     * Get a product configurator by product ID.
     * @param {String} tenantId 
     * @param {String} productId 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [status = 'UNKNOWN')] 
     * @param {module:api/ConfiguratorApi~productConfiguratorGetConfiguratorByProductIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductconfiguratorconfiguratorEntity}
     */
    productConfiguratorGetConfiguratorByProductId(tenantId, productId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling productConfiguratorGetConfiguratorByProductId");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling productConfiguratorGetConfiguratorByProductId");
      }

      let pathParams = {
        'tenantId': tenantId,
        'productId': productId
      };
      let queryParams = {
        'status': opts['status']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['standardAuthorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductconfiguratorconfiguratorEntity;
      return this.apiClient.callApi(
        '/v1/{tenantId}/product/{productId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productConfiguratorGetConfiguratorByProductId2 operation.
     * @callback module:api/ConfiguratorApi~productConfiguratorGetConfiguratorByProductId2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductconfiguratorconfiguratorEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Product Configurator by Product ID
     * Get a product configurator by product ID.
     * @param {String} tenantId 
     * @param {String} productId 
     * @param {module:model/String} status 
     * @param {module:api/ConfiguratorApi~productConfiguratorGetConfiguratorByProductId2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductconfiguratorconfiguratorEntity}
     */
    productConfiguratorGetConfiguratorByProductId2(tenantId, productId, status, callback) {
      let postBody = null;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling productConfiguratorGetConfiguratorByProductId2");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling productConfiguratorGetConfiguratorByProductId2");
      }
      // verify the required parameter 'status' is set
      if (status === undefined || status === null) {
        throw new Error("Missing the required parameter 'status' when calling productConfiguratorGetConfiguratorByProductId2");
      }

      let pathParams = {
        'tenantId': tenantId,
        'productId': productId,
        'status': status
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['standardAuthorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductconfiguratorconfiguratorEntity;
      return this.apiClient.callApi(
        '/v1/{tenantId}/product/{productId}/status/{status}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productConfiguratorListConfigurators operation.
     * @callback module:api/ConfiguratorApi~productConfiguratorListConfiguratorsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConfiguratorListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Product Configurators
     * List all product configurators.
     * @param {String} tenantId 
     * @param {String} productId 
     * @param {Number} pageSize 
     * @param {module:model/ConfiguratorListRequest} body 
     * @param {module:api/ConfiguratorApi~productConfiguratorListConfiguratorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConfiguratorListResponse}
     */
    productConfiguratorListConfigurators(tenantId, productId, pageSize, body, callback) {
      let postBody = body;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling productConfiguratorListConfigurators");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling productConfiguratorListConfigurators");
      }
      // verify the required parameter 'pageSize' is set
      if (pageSize === undefined || pageSize === null) {
        throw new Error("Missing the required parameter 'pageSize' when calling productConfiguratorListConfigurators");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling productConfiguratorListConfigurators");
      }

      let pathParams = {
        'tenantId': tenantId,
        'productId': productId,
        'pageSize': pageSize
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['standardAuthorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConfiguratorListResponse;
      return this.apiClient.callApi(
        '/v1/{tenantId}/product/{productId}/page-size/{pageSize}/configurators', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
