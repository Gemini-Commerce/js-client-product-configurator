/**
 * Product Configurator Service
 * ## Introduction  This comprehensive guide will equip you with the knowledge to integrate and leverage our Product Configurator Service in your applications.  ## Quick Start  Get up and running in no time! Follow these steps to kickstart your integration:  1. **Authentication:** Obtain your integration JWT to authenticate your requests. 2. **Client Libraries:** Explore our GitHub repositories to grab client libraries in your preferred programming language. 3. **API Overview:** Familiarize yourself with our RESTful API using the OpenAPI specification.  ## Integration  ### API Overview  Our RESTful API is the gateway to unlocking the full potential of Product Configurator. Check out the detailed [API Reference](/docs/category/configurator) for a granular understanding of each endpoint and request/response format.  ### Client Libraries  To expedite your integration process, we provide client libraries for various programming languages. Find the one that suits your stack in our [GitHub repositories](https://github.com/Gemini-Commerce).  ### Authentication  Security is paramount. Learn how to authenticate your requests using JWT. This ensures a secure and reliable connection between your application and Product Configurator.  ## Configuration Management  ### Configurator Lifecycle  Understand the lifecycle of configurators, from draft to active and deleted. This flexibility allows you to manage configurations at your own pace.  ### Steps and Options  Configure product steps with ease and define options effortlessly. Explore the power of dependencies to create dynamic and intuitive configurations.  ### Matrices  Delve into matricesâ€”your secret weapon. Explore price and weight matrices, and learn how configured steps influence properties and pricing.  ### Price Management  Unleash dynamic pricing with our versatile price matrices. From fixed prices to incremental structures, adapt to diverse pricing models effortlessly.  ## Security  Your data is in safe hands. Discover how Product Configurator ensures security through JWT authentication, safeguarding your sensitive information.  ## Backward Compatibility  Stay ahead of the curve. Learn about our versioning strategy, providing backward compatibility while allowing our service to evolve seamlessly.  ## Developer Support  Have questions? Need assistance? Write to us at [info@gemini-commerce.com](mailto:info@gemini-commerce.com) and we will get back to you.
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GooglerpcStatus from '../model/GooglerpcStatus';
import ProductconfiguratorstepBulkCreateRequest from '../model/ProductconfiguratorstepBulkCreateRequest';
import ProductconfiguratorstepBulkCreateResponse from '../model/ProductconfiguratorstepBulkCreateResponse';
import ProductconfiguratorstepBulkDeleteRequest from '../model/ProductconfiguratorstepBulkDeleteRequest';
import ProductconfiguratorstepCopyRequest from '../model/ProductconfiguratorstepCopyRequest';
import ProductconfiguratorstepCreateRequest from '../model/ProductconfiguratorstepCreateRequest';
import ProductconfiguratorstepEntity from '../model/ProductconfiguratorstepEntity';
import ProductconfiguratorstepUpdateRequest from '../model/ProductconfiguratorstepUpdateRequest';

/**
* Step service.
* @module GeminiCommerce\ProductConfigurator/api/StepApi
* @version v1
*/
export default class StepApi {

    /**
    * Constructs a new StepApi. 
    * @alias module:GeminiCommerce\ProductConfigurator/api/StepApi
    * @class
    * @param {module:GeminiCommerce\ProductConfigurator/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:GeminiCommerce\ProductConfigurator/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the productConfiguratorBulkCreateSteps operation.
     * @callback module:GeminiCommerce\ProductConfigurator/api/StepApi~productConfiguratorBulkCreateStepsCallback
     * @param {String} error Error message, if any.
     * @param {module:GeminiCommerce\ProductConfigurator/model/ProductconfiguratorstepBulkCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk Create Steps
     * Add multiple steps to an existing product configurator simultaneously. Submit a POST request with the necessary step details in the body to efficiently extend the configuration process in bulk. Simplify large-scale configuration management effortlessly.
     * @param {String} tenantId 
     * @param {String} configuratorId 
     * @param {module:GeminiCommerce\ProductConfigurator/model/ProductconfiguratorstepBulkCreateRequest} body 
     * @param {module:GeminiCommerce\ProductConfigurator/api/StepApi~productConfiguratorBulkCreateStepsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:GeminiCommerce\ProductConfigurator/model/ProductconfiguratorstepBulkCreateResponse}
     */
    productConfiguratorBulkCreateSteps(tenantId, configuratorId, body, callback) {
      let postBody = body;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling productConfiguratorBulkCreateSteps");
      }
      // verify the required parameter 'configuratorId' is set
      if (configuratorId === undefined || configuratorId === null) {
        throw new Error("Missing the required parameter 'configuratorId' when calling productConfiguratorBulkCreateSteps");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling productConfiguratorBulkCreateSteps");
      }

      let pathParams = {
        'tenantId': tenantId,
        'configuratorId': configuratorId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['standardAuthorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductconfiguratorstepBulkCreateResponse;
      return this.apiClient.callApi(
        '/v1/{tenantId}/configurator/{configuratorId}/step/create/bulk', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productConfiguratorBulkDeleteSteps operation.
     * @callback module:GeminiCommerce\ProductConfigurator/api/StepApi~productConfiguratorBulkDeleteStepsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk Delete Steps
     * Efficiently remove multiple steps from a product configurator using a bulk delete operation. Specify the tenant ID and submit a POST request with the list of step IDs in the body for streamlined configuration management.
     * @param {String} tenantId 
     * @param {module:GeminiCommerce\ProductConfigurator/model/ProductconfiguratorstepBulkDeleteRequest} body 
     * @param {module:GeminiCommerce\ProductConfigurator/api/StepApi~productConfiguratorBulkDeleteStepsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    productConfiguratorBulkDeleteSteps(tenantId, body, callback) {
      let postBody = body;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling productConfiguratorBulkDeleteSteps");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling productConfiguratorBulkDeleteSteps");
      }

      let pathParams = {
        'tenantId': tenantId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['standardAuthorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/{tenantId}/step/delete/bulk', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productConfiguratorCopyStep operation.
     * @callback module:GeminiCommerce\ProductConfigurator/api/StepApi~productConfiguratorCopyStepCallback
     * @param {String} error Error message, if any.
     * @param {module:GeminiCommerce\ProductConfigurator/model/ProductconfiguratorstepEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Copy Step
     * Duplicate an existing step from the source to a specified tenant. Utilize a POST request with an empty body to initiate the copy process, creating a new step based on the source configuration. Streamline step replication effortlessly.
     * @param {String} tenantId 
     * @param {String} sourceStepId 
     * @param {module:GeminiCommerce\ProductConfigurator/model/ProductconfiguratorstepCopyRequest} body 
     * @param {module:GeminiCommerce\ProductConfigurator/api/StepApi~productConfiguratorCopyStepCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:GeminiCommerce\ProductConfigurator/model/ProductconfiguratorstepEntity}
     */
    productConfiguratorCopyStep(tenantId, sourceStepId, body, callback) {
      let postBody = body;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling productConfiguratorCopyStep");
      }
      // verify the required parameter 'sourceStepId' is set
      if (sourceStepId === undefined || sourceStepId === null) {
        throw new Error("Missing the required parameter 'sourceStepId' when calling productConfiguratorCopyStep");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling productConfiguratorCopyStep");
      }

      let pathParams = {
        'tenantId': tenantId,
        'sourceStepId': sourceStepId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['standardAuthorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductconfiguratorstepEntity;
      return this.apiClient.callApi(
        '/v1/{tenantId}/step/{sourceStepId}/copy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productConfiguratorCreateStep operation.
     * @callback module:GeminiCommerce\ProductConfigurator/api/StepApi~productConfiguratorCreateStepCallback
     * @param {String} error Error message, if any.
     * @param {module:GeminiCommerce\ProductConfigurator/model/ProductconfiguratorstepEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Step
     * Add a new step to an existing product configurator by specifying the tenant and configurator IDs. Utilize a POST request with the required step details in the body to seamlessly extend the configuration process.
     * @param {String} tenantId 
     * @param {String} configuratorId 
     * @param {module:GeminiCommerce\ProductConfigurator/model/ProductconfiguratorstepCreateRequest} body 
     * @param {module:GeminiCommerce\ProductConfigurator/api/StepApi~productConfiguratorCreateStepCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:GeminiCommerce\ProductConfigurator/model/ProductconfiguratorstepEntity}
     */
    productConfiguratorCreateStep(tenantId, configuratorId, body, callback) {
      let postBody = body;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling productConfiguratorCreateStep");
      }
      // verify the required parameter 'configuratorId' is set
      if (configuratorId === undefined || configuratorId === null) {
        throw new Error("Missing the required parameter 'configuratorId' when calling productConfiguratorCreateStep");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling productConfiguratorCreateStep");
      }

      let pathParams = {
        'tenantId': tenantId,
        'configuratorId': configuratorId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['standardAuthorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductconfiguratorstepEntity;
      return this.apiClient.callApi(
        '/v1/{tenantId}/configurator/{configuratorId}/step/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productConfiguratorDeleteStep operation.
     * @callback module:GeminiCommerce\ProductConfigurator/api/StepApi~productConfiguratorDeleteStepCallback
     * @param {String} error Error message, if any.
     * @param {module:GeminiCommerce\ProductConfigurator/model/GooglerpcStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Step
     * Remove a step from a product configurator by specifying the tenant and step IDs. Ensure precision in configuration management with a straightforward DELETE request, simplifying the elimination of unwanted steps.
     * @param {String} tenantId 
     * @param {String} stepId 
     * @param {module:GeminiCommerce\ProductConfigurator/api/StepApi~productConfiguratorDeleteStepCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:GeminiCommerce\ProductConfigurator/model/GooglerpcStatus}
     */
    productConfiguratorDeleteStep(tenantId, stepId, callback) {
      let postBody = null;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling productConfiguratorDeleteStep");
      }
      // verify the required parameter 'stepId' is set
      if (stepId === undefined || stepId === null) {
        throw new Error("Missing the required parameter 'stepId' when calling productConfiguratorDeleteStep");
      }

      let pathParams = {
        'tenantId': tenantId,
        'stepId': stepId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['standardAuthorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GooglerpcStatus;
      return this.apiClient.callApi(
        '/v1/{tenantId}/step/{stepId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productConfiguratorUpdateStep operation.
     * @callback module:GeminiCommerce\ProductConfigurator/api/StepApi~productConfiguratorUpdateStepCallback
     * @param {String} error Error message, if any.
     * @param {module:GeminiCommerce\ProductConfigurator/model/ProductconfiguratorstepEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Step
     * Modify an existing step within a product configurator by specifying the tenant and step IDs. Utilize a PUT request with updated step details in the body for seamless customization and fine-tuning of your product configurations.
     * @param {String} tenantId 
     * @param {String} stepId 
     * @param {module:GeminiCommerce\ProductConfigurator/model/ProductconfiguratorstepUpdateRequest} body 
     * @param {module:GeminiCommerce\ProductConfigurator/api/StepApi~productConfiguratorUpdateStepCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:GeminiCommerce\ProductConfigurator/model/ProductconfiguratorstepEntity}
     */
    productConfiguratorUpdateStep(tenantId, stepId, body, callback) {
      let postBody = body;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling productConfiguratorUpdateStep");
      }
      // verify the required parameter 'stepId' is set
      if (stepId === undefined || stepId === null) {
        throw new Error("Missing the required parameter 'stepId' when calling productConfiguratorUpdateStep");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling productConfiguratorUpdateStep");
      }

      let pathParams = {
        'tenantId': tenantId,
        'stepId': stepId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['standardAuthorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductconfiguratorstepEntity;
      return this.apiClient.callApi(
        '/v1/{tenantId}/step/{stepId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
