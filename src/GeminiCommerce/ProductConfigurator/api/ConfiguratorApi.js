/**
 * Product Configurator Service
 * ## Introduction  This comprehensive guide will equip you with the knowledge to integrate and leverage our Product Configurator Service in your applications.  ## Quick Start  Get up and running in no time! Follow these steps to kickstart your integration:  1. **Authentication:** Obtain your integration JWT to authenticate your requests. 2. **Client Libraries:** Explore our GitHub repositories to grab client libraries in your preferred programming language. 3. **API Overview:** Familiarize yourself with our RESTful API using the OpenAPI specification.  ## Integration  ### API Overview  Our RESTful API is the gateway to unlocking the full potential of Product Configurator. Check out the detailed [API Reference](/docs/category/configurator) for a granular understanding of each endpoint and request/response format.  ### Client Libraries  To expedite your integration process, we provide client libraries for various programming languages. Find the one that suits your stack in our [GitHub repositories](https://github.com/Gemini-Commerce).  ### Authentication  Security is paramount. Learn how to authenticate your requests using JWT. This ensures a secure and reliable connection between your application and Product Configurator.  ## Configuration Management  ### Configurator Lifecycle  Understand the lifecycle of configurators, from draft to active and deleted. This flexibility allows you to manage configurations at your own pace.  ### Steps and Options  Configure product steps with ease and define options effortlessly. Explore the power of dependencies to create dynamic and intuitive configurations.  ### Matrices  Delve into matricesâ€”your secret weapon. Explore price and weight matrices, and learn how configured steps influence properties and pricing.  ### Price Management  Unleash dynamic pricing with our versatile price matrices. From fixed prices to incremental structures, adapt to diverse pricing models effortlessly.  ## Security  Your data is in safe hands. Discover how Product Configurator ensures security through JWT authentication, safeguarding your sensitive information.  ## Backward Compatibility  Stay ahead of the curve. Learn about our versioning strategy, providing backward compatibility while allowing our service to evolve seamlessly.  ## Developer Support  Have questions? Need assistance? Write to us at [info@gemini-commerce.com](mailto:info@gemini-commerce.com) and we will get back to you.
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ConfiguratorListRequest from '../model/ConfiguratorListRequest';
import ConfiguratorListResponse from '../model/ConfiguratorListResponse';
import GooglerpcStatus from '../model/GooglerpcStatus';
import ProductconfiguratorconfiguratorCopyRequest from '../model/ProductconfiguratorconfiguratorCopyRequest';
import ProductconfiguratorconfiguratorCreateRequest from '../model/ProductconfiguratorconfiguratorCreateRequest';
import ProductconfiguratorconfiguratorEntity from '../model/ProductconfiguratorconfiguratorEntity';
import ProductconfiguratorconfiguratorUpdateRequest from '../model/ProductconfiguratorconfiguratorUpdateRequest';

/**
* Configurator service.
* @module GeminiCommerce\ProductConfigurator/api/ConfiguratorApi
* @version v1
*/
export default class ConfiguratorApi {

    /**
    * Constructs a new ConfiguratorApi. 
    * @alias module:GeminiCommerce\ProductConfigurator/api/ConfiguratorApi
    * @class
    * @param {module:GeminiCommerce\ProductConfigurator/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:GeminiCommerce\ProductConfigurator/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the productConfiguratorCopyConfigurator operation.
     * @callback module:GeminiCommerce\ProductConfigurator/api/ConfiguratorApi~productConfiguratorCopyConfiguratorCallback
     * @param {String} error Error message, if any.
     * @param {module:GeminiCommerce\ProductConfigurator/model/ProductconfiguratorconfiguratorEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Copy Configurator
     * Duplicate an existing product configurator from the source to the specified tenant and product. Submit an empty body to initiate the copy process, creating a new configuration based on the source.
     * @param {String} tenantId 
     * @param {String} sourceConfiguratorId 
     * @param {module:GeminiCommerce\ProductConfigurator/model/ProductconfiguratorconfiguratorCopyRequest} body 
     * @param {module:GeminiCommerce\ProductConfigurator/api/ConfiguratorApi~productConfiguratorCopyConfiguratorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:GeminiCommerce\ProductConfigurator/model/ProductconfiguratorconfiguratorEntity}
     */
    productConfiguratorCopyConfigurator(tenantId, sourceConfiguratorId, body, callback) {
      let postBody = body;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling productConfiguratorCopyConfigurator");
      }
      // verify the required parameter 'sourceConfiguratorId' is set
      if (sourceConfiguratorId === undefined || sourceConfiguratorId === null) {
        throw new Error("Missing the required parameter 'sourceConfiguratorId' when calling productConfiguratorCopyConfigurator");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling productConfiguratorCopyConfigurator");
      }

      let pathParams = {
        'tenantId': tenantId,
        'sourceConfiguratorId': sourceConfiguratorId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['standardAuthorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductconfiguratorconfiguratorEntity;
      return this.apiClient.callApi(
        '/v1/{tenantId}/product/{sourceConfiguratorId}/copy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productConfiguratorCreateConfigurator operation.
     * @callback module:GeminiCommerce\ProductConfigurator/api/ConfiguratorApi~productConfiguratorCreateConfiguratorCallback
     * @param {String} error Error message, if any.
     * @param {module:GeminiCommerce\ProductConfigurator/model/ProductconfiguratorconfiguratorCreateRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Configurator
     * Create a new product configurator for a specified tenant and product. Submit the desired configuration details in the request body to initiate the creation process.
     * @param {String} tenantId 
     * @param {String} productId 
     * @param {module:GeminiCommerce\ProductConfigurator/model/ProductconfiguratorconfiguratorCreateRequest} body 
     * @param {module:GeminiCommerce\ProductConfigurator/api/ConfiguratorApi~productConfiguratorCreateConfiguratorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:GeminiCommerce\ProductConfigurator/model/ProductconfiguratorconfiguratorCreateRequest}
     */
    productConfiguratorCreateConfigurator(tenantId, productId, body, callback) {
      let postBody = body;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling productConfiguratorCreateConfigurator");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling productConfiguratorCreateConfigurator");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling productConfiguratorCreateConfigurator");
      }

      let pathParams = {
        'tenantId': tenantId,
        'productId': productId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['standardAuthorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductconfiguratorconfiguratorCreateRequest;
      return this.apiClient.callApi(
        '/v1/{tenantId}/product/{productId}/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productConfiguratorDeleteConfigurator operation.
     * @callback module:GeminiCommerce\ProductConfigurator/api/ConfiguratorApi~productConfiguratorDeleteConfiguratorCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Configurator
     * Delete a product configurator by specifying the tenant and configurator IDs. Ensure precise removal of unwanted configurations with a straightforward DELETE request.
     * @param {String} tenantId 
     * @param {String} configuratorId 
     * @param {module:GeminiCommerce\ProductConfigurator/api/ConfiguratorApi~productConfiguratorDeleteConfiguratorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    productConfiguratorDeleteConfigurator(tenantId, configuratorId, callback) {
      let postBody = null;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling productConfiguratorDeleteConfigurator");
      }
      // verify the required parameter 'configuratorId' is set
      if (configuratorId === undefined || configuratorId === null) {
        throw new Error("Missing the required parameter 'configuratorId' when calling productConfiguratorDeleteConfigurator");
      }

      let pathParams = {
        'tenantId': tenantId,
        'configuratorId': configuratorId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['standardAuthorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/{tenantId}/configurator/{configuratorId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productConfiguratorGetConfiguratorByProductId operation.
     * @callback module:GeminiCommerce\ProductConfigurator/api/ConfiguratorApi~productConfiguratorGetConfiguratorByProductIdCallback
     * @param {String} error Error message, if any.
     * @param {module:GeminiCommerce\ProductConfigurator/model/ProductconfiguratorconfiguratorEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Product Configurator by Product ID
     * Get a product configurator by product ID.
     * @param {String} tenantId 
     * @param {String} productId 
     * @param {Object} opts Optional parameters
     * @param {module:GeminiCommerce\ProductConfigurator/model/String} [status = 'UNKNOWN')] 
     * @param {module:GeminiCommerce\ProductConfigurator/api/ConfiguratorApi~productConfiguratorGetConfiguratorByProductIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:GeminiCommerce\ProductConfigurator/model/ProductconfiguratorconfiguratorEntity}
     */
    productConfiguratorGetConfiguratorByProductId(tenantId, productId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling productConfiguratorGetConfiguratorByProductId");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling productConfiguratorGetConfiguratorByProductId");
      }

      let pathParams = {
        'tenantId': tenantId,
        'productId': productId
      };
      let queryParams = {
        'status': opts['status']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['standardAuthorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductconfiguratorconfiguratorEntity;
      return this.apiClient.callApi(
        '/v1/{tenantId}/product/{productId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productConfiguratorGetConfiguratorByProductId2 operation.
     * @callback module:GeminiCommerce\ProductConfigurator/api/ConfiguratorApi~productConfiguratorGetConfiguratorByProductId2Callback
     * @param {String} error Error message, if any.
     * @param {module:GeminiCommerce\ProductConfigurator/model/ProductconfiguratorconfiguratorEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Product Configurator by Product ID
     * Get a product configurator by product ID.
     * @param {String} tenantId 
     * @param {String} productId 
     * @param {module:GeminiCommerce\ProductConfigurator/model/String} status 
     * @param {module:GeminiCommerce\ProductConfigurator/api/ConfiguratorApi~productConfiguratorGetConfiguratorByProductId2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:GeminiCommerce\ProductConfigurator/model/ProductconfiguratorconfiguratorEntity}
     */
    productConfiguratorGetConfiguratorByProductId2(tenantId, productId, status, callback) {
      let postBody = null;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling productConfiguratorGetConfiguratorByProductId2");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling productConfiguratorGetConfiguratorByProductId2");
      }
      // verify the required parameter 'status' is set
      if (status === undefined || status === null) {
        throw new Error("Missing the required parameter 'status' when calling productConfiguratorGetConfiguratorByProductId2");
      }

      let pathParams = {
        'tenantId': tenantId,
        'productId': productId,
        'status': status
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['standardAuthorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductconfiguratorconfiguratorEntity;
      return this.apiClient.callApi(
        '/v1/{tenantId}/product/{productId}/status/{status}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productConfiguratorListConfigurators operation.
     * @callback module:GeminiCommerce\ProductConfigurator/api/ConfiguratorApi~productConfiguratorListConfiguratorsCallback
     * @param {String} error Error message, if any.
     * @param {module:GeminiCommerce\ProductConfigurator/model/ConfiguratorListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Product Configurators
     * List all product configurators.
     * @param {String} tenantId 
     * @param {String} productId 
     * @param {Number} pageSize 
     * @param {module:GeminiCommerce\ProductConfigurator/model/ConfiguratorListRequest} body 
     * @param {module:GeminiCommerce\ProductConfigurator/api/ConfiguratorApi~productConfiguratorListConfiguratorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:GeminiCommerce\ProductConfigurator/model/ConfiguratorListResponse}
     */
    productConfiguratorListConfigurators(tenantId, productId, pageSize, body, callback) {
      let postBody = body;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling productConfiguratorListConfigurators");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling productConfiguratorListConfigurators");
      }
      // verify the required parameter 'pageSize' is set
      if (pageSize === undefined || pageSize === null) {
        throw new Error("Missing the required parameter 'pageSize' when calling productConfiguratorListConfigurators");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling productConfiguratorListConfigurators");
      }

      let pathParams = {
        'tenantId': tenantId,
        'productId': productId,
        'pageSize': pageSize
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['standardAuthorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConfiguratorListResponse;
      return this.apiClient.callApi(
        '/v1/{tenantId}/product/{productId}/page-size/{pageSize}/configurators', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productConfiguratorUpdateConfigurator operation.
     * @callback module:GeminiCommerce\ProductConfigurator/api/ConfiguratorApi~productConfiguratorUpdateConfiguratorCallback
     * @param {String} error Error message, if any.
     * @param {module:GeminiCommerce\ProductConfigurator/model/ProductconfiguratorconfiguratorEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Configurator
     * Modify an existing product configurator by specifying the tenant and configurator IDs. Use a PUT request with the updated configuration details in the body to seamlessly update and manage product configurations
     * @param {String} tenantId 
     * @param {String} configuratorId 
     * @param {module:GeminiCommerce\ProductConfigurator/model/ProductconfiguratorconfiguratorUpdateRequest} body 
     * @param {module:GeminiCommerce\ProductConfigurator/api/ConfiguratorApi~productConfiguratorUpdateConfiguratorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:GeminiCommerce\ProductConfigurator/model/ProductconfiguratorconfiguratorEntity}
     */
    productConfiguratorUpdateConfigurator(tenantId, configuratorId, body, callback) {
      let postBody = body;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling productConfiguratorUpdateConfigurator");
      }
      // verify the required parameter 'configuratorId' is set
      if (configuratorId === undefined || configuratorId === null) {
        throw new Error("Missing the required parameter 'configuratorId' when calling productConfiguratorUpdateConfigurator");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling productConfiguratorUpdateConfigurator");
      }

      let pathParams = {
        'tenantId': tenantId,
        'configuratorId': configuratorId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['standardAuthorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductconfiguratorconfiguratorEntity;
      return this.apiClient.callApi(
        '/v1/{tenantId}/configurator/{configuratorId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
