/**
 * Product Configurator Service
 * ## Introduction  This comprehensive guide will equip you with the knowledge to integrate and leverage our Product Configurator Service in your applications.  ## Quick Start  Get up and running in no time! Follow these steps to kickstart your integration:  1. **Authentication:** Obtain your integration JWT to authenticate your requests. 2. **Client Libraries:** Explore our GitHub repositories to grab client libraries in your preferred programming language. 3. **API Overview:** Familiarize yourself with our RESTful API using the OpenAPI specification.  ## Integration  ### API Overview  Our RESTful API is the gateway to unlocking the full potential of Product Configurator. Check out the detailed [API Reference](/docs/category/configurator) for a granular understanding of each endpoint and request/response format.  ### Client Libraries  To expedite your integration process, we provide client libraries for various programming languages. Find the one that suits your stack in our [GitHub repositories](https://github.com/Gemini-Commerce).  ### Authentication  Security is paramount. Learn how to authenticate your requests using JWT. This ensures a secure and reliable connection between your application and Product Configurator.  ## Configuration Management  ### Configurator Lifecycle  Understand the lifecycle of configurators, from draft to active and deleted. This flexibility allows you to manage configurations at your own pace.  ### Steps and Options  Configure product steps with ease and define options effortlessly. Explore the power of dependencies to create dynamic and intuitive configurations.  ### Matrices  Delve into matricesâ€”your secret weapon. Explore price and weight matrices, and learn how configured steps influence properties and pricing.  ### Price Management  Unleash dynamic pricing with our versatile price matrices. From fixed prices to incremental structures, adapt to diverse pricing models effortlessly.  ## Security  Your data is in safe hands. Discover how Product Configurator ensures security through JWT authentication, safeguarding your sensitive information.  ## Backward Compatibility  Stay ahead of the curve. Learn about our versioning strategy, providing backward compatibility while allowing our service to evolve seamlessly.  ## Developer Support  Have questions? Need assistance? Write to us at [info@gemini-commerce.com](mailto:info@gemini-commerce.com) and we will get back to you.
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GooglerpcStatus from '../model/GooglerpcStatus';
import OptionListOptionsRequest from '../model/OptionListOptionsRequest';
import OptionListOptionsResponse from '../model/OptionListOptionsResponse';
import ProductconfiguratoroptionBulkCreateRequest from '../model/ProductconfiguratoroptionBulkCreateRequest';
import ProductconfiguratoroptionBulkCreateResponse from '../model/ProductconfiguratoroptionBulkCreateResponse';
import ProductconfiguratoroptionBulkDeleteRequest from '../model/ProductconfiguratoroptionBulkDeleteRequest';
import ProductconfiguratoroptionBulkUpdateRequest from '../model/ProductconfiguratoroptionBulkUpdateRequest';
import ProductconfiguratoroptionBulkUpdateResponse from '../model/ProductconfiguratoroptionBulkUpdateResponse';
import ProductconfiguratoroptionCopyRequest from '../model/ProductconfiguratoroptionCopyRequest';
import ProductconfiguratoroptionCreateRequest from '../model/ProductconfiguratoroptionCreateRequest';
import ProductconfiguratoroptionEntity from '../model/ProductconfiguratoroptionEntity';
import ProductconfiguratoroptionUpdateRequest from '../model/ProductconfiguratoroptionUpdateRequest';

/**
* Option service.
* @module GeminiCommerce\ProductConfigurator/api/OptionApi
* @version v1
*/
export default class OptionApi {

    /**
    * Constructs a new OptionApi. 
    * @alias module:GeminiCommerce\ProductConfigurator/api/OptionApi
    * @class
    * @param {module:GeminiCommerce\ProductConfigurator/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:GeminiCommerce\ProductConfigurator/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the productConfiguratorBulkCreateOptions operation.
     * @callback module:GeminiCommerce\ProductConfigurator/api/OptionApi~productConfiguratorBulkCreateOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:GeminiCommerce\ProductConfigurator/model/ProductconfiguratoroptionBulkCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk Create Options
     * Add multiple options to an existing step simultaneously. Submit a POST request with the necessary option details in the body to efficiently expand the configuration possibilities in bulk. Streamline large-scale option management effortlessly.
     * @param {String} tenantId 
     * @param {String} stepId 
     * @param {module:GeminiCommerce\ProductConfigurator/model/ProductconfiguratoroptionBulkCreateRequest} body 
     * @param {module:GeminiCommerce\ProductConfigurator/api/OptionApi~productConfiguratorBulkCreateOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:GeminiCommerce\ProductConfigurator/model/ProductconfiguratoroptionBulkCreateResponse}
     */
    productConfiguratorBulkCreateOptions(tenantId, stepId, body, callback) {
      let postBody = body;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling productConfiguratorBulkCreateOptions");
      }
      // verify the required parameter 'stepId' is set
      if (stepId === undefined || stepId === null) {
        throw new Error("Missing the required parameter 'stepId' when calling productConfiguratorBulkCreateOptions");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling productConfiguratorBulkCreateOptions");
      }

      let pathParams = {
        'tenantId': tenantId,
        'stepId': stepId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['standardAuthorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductconfiguratoroptionBulkCreateResponse;
      return this.apiClient.callApi(
        '/v1/{tenantId}/step/{stepId}/option/create/bulk', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productConfiguratorBulkDeleteOptions operation.
     * @callback module:GeminiCommerce\ProductConfigurator/api/OptionApi~productConfiguratorBulkDeleteOptionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk Delete Options
     * Efficiently remove multiple options from configurations using a bulk delete operation. Specify the tenant ID and submit a POST request with the list of option IDs in the body for streamlined option management.
     * @param {String} tenantId 
     * @param {module:GeminiCommerce\ProductConfigurator/model/ProductconfiguratoroptionBulkDeleteRequest} body 
     * @param {module:GeminiCommerce\ProductConfigurator/api/OptionApi~productConfiguratorBulkDeleteOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    productConfiguratorBulkDeleteOptions(tenantId, body, callback) {
      let postBody = body;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling productConfiguratorBulkDeleteOptions");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling productConfiguratorBulkDeleteOptions");
      }

      let pathParams = {
        'tenantId': tenantId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['standardAuthorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/{tenantId}/option/delete/bulk', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productConfiguratorBulkUpdateOptions operation.
     * @callback module:GeminiCommerce\ProductConfigurator/api/OptionApi~productConfiguratorBulkUpdateOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:GeminiCommerce\ProductConfigurator/model/ProductconfiguratoroptionBulkUpdateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk Update Options
     * Effortlessly update multiple options. Specify the tenant ID and submit a PUT request with the updated option details in the body. Streamline the customization of a multitude of options in one go.
     * @param {String} tenantId 
     * @param {module:GeminiCommerce\ProductConfigurator/model/ProductconfiguratoroptionBulkUpdateRequest} body 
     * @param {module:GeminiCommerce\ProductConfigurator/api/OptionApi~productConfiguratorBulkUpdateOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:GeminiCommerce\ProductConfigurator/model/ProductconfiguratoroptionBulkUpdateResponse}
     */
    productConfiguratorBulkUpdateOptions(tenantId, body, callback) {
      let postBody = body;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling productConfiguratorBulkUpdateOptions");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling productConfiguratorBulkUpdateOptions");
      }

      let pathParams = {
        'tenantId': tenantId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['standardAuthorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductconfiguratoroptionBulkUpdateResponse;
      return this.apiClient.callApi(
        '/v1/{tenantId}/option/bulk', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productConfiguratorCopyOption operation.
     * @callback module:GeminiCommerce\ProductConfigurator/api/OptionApi~productConfiguratorCopyOptionCallback
     * @param {String} error Error message, if any.
     * @param {module:GeminiCommerce\ProductConfigurator/model/ProductconfiguratoroptionEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Copy Option
     * Duplicate an existing option from the source to a specified tenant. Utilize a POST request with an empty body to initiate the copy process, creating a new option based on the source configuration. Streamline option replication effortlessly.
     * @param {String} tenantId 
     * @param {String} sourceOptionId 
     * @param {module:GeminiCommerce\ProductConfigurator/model/ProductconfiguratoroptionCopyRequest} body 
     * @param {module:GeminiCommerce\ProductConfigurator/api/OptionApi~productConfiguratorCopyOptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:GeminiCommerce\ProductConfigurator/model/ProductconfiguratoroptionEntity}
     */
    productConfiguratorCopyOption(tenantId, sourceOptionId, body, callback) {
      let postBody = body;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling productConfiguratorCopyOption");
      }
      // verify the required parameter 'sourceOptionId' is set
      if (sourceOptionId === undefined || sourceOptionId === null) {
        throw new Error("Missing the required parameter 'sourceOptionId' when calling productConfiguratorCopyOption");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling productConfiguratorCopyOption");
      }

      let pathParams = {
        'tenantId': tenantId,
        'sourceOptionId': sourceOptionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['standardAuthorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductconfiguratoroptionEntity;
      return this.apiClient.callApi(
        '/v1/{tenantId}/option/{sourceOptionId}/copy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productConfiguratorCreateOption operation.
     * @callback module:GeminiCommerce\ProductConfigurator/api/OptionApi~productConfiguratorCreateOptionCallback
     * @param {String} error Error message, if any.
     * @param {module:GeminiCommerce\ProductConfigurator/model/ProductconfiguratoroptionEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Option
     * Integrate a new option into an existing step by specifying the tenant and step IDs. Use a POST request with the required option details in the body for seamless customization and expansion of product configurations.
     * @param {String} tenantId 
     * @param {String} stepId 
     * @param {module:GeminiCommerce\ProductConfigurator/model/ProductconfiguratoroptionCreateRequest} body 
     * @param {module:GeminiCommerce\ProductConfigurator/api/OptionApi~productConfiguratorCreateOptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:GeminiCommerce\ProductConfigurator/model/ProductconfiguratoroptionEntity}
     */
    productConfiguratorCreateOption(tenantId, stepId, body, callback) {
      let postBody = body;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling productConfiguratorCreateOption");
      }
      // verify the required parameter 'stepId' is set
      if (stepId === undefined || stepId === null) {
        throw new Error("Missing the required parameter 'stepId' when calling productConfiguratorCreateOption");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling productConfiguratorCreateOption");
      }

      let pathParams = {
        'tenantId': tenantId,
        'stepId': stepId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['standardAuthorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductconfiguratoroptionEntity;
      return this.apiClient.callApi(
        '/v1/{tenantId}/step/{stepId}/option/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productConfiguratorDeleteOption operation.
     * @callback module:GeminiCommerce\ProductConfigurator/api/OptionApi~productConfiguratorDeleteOptionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Option
     * Remove a specific option by specifying the tenant and option IDs. Ensure precision in option management with a straightforward DELETE request, simplifying the elimination of unwanted configuration choices.
     * @param {String} tenantId 
     * @param {String} optionId 
     * @param {module:GeminiCommerce\ProductConfigurator/api/OptionApi~productConfiguratorDeleteOptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    productConfiguratorDeleteOption(tenantId, optionId, callback) {
      let postBody = null;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling productConfiguratorDeleteOption");
      }
      // verify the required parameter 'optionId' is set
      if (optionId === undefined || optionId === null) {
        throw new Error("Missing the required parameter 'optionId' when calling productConfiguratorDeleteOption");
      }

      let pathParams = {
        'tenantId': tenantId,
        'optionId': optionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['standardAuthorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/{tenantId}/option/{optionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productConfiguratorListOptions operation.
     * @callback module:GeminiCommerce\ProductConfigurator/api/OptionApi~productConfiguratorListOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:GeminiCommerce\ProductConfigurator/model/OptionListOptionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Options
     * Retrieve a list of options for a specific step based on tenant and step IDs. Customize results by specifying page size for efficient pagination. Submit an empty body to get all options associated with the step.
     * @param {String} tenantId 
     * @param {String} stepId 
     * @param {Number} pageSize 
     * @param {module:GeminiCommerce\ProductConfigurator/model/OptionListOptionsRequest} body 
     * @param {module:GeminiCommerce\ProductConfigurator/api/OptionApi~productConfiguratorListOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:GeminiCommerce\ProductConfigurator/model/OptionListOptionsResponse}
     */
    productConfiguratorListOptions(tenantId, stepId, pageSize, body, callback) {
      let postBody = body;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling productConfiguratorListOptions");
      }
      // verify the required parameter 'stepId' is set
      if (stepId === undefined || stepId === null) {
        throw new Error("Missing the required parameter 'stepId' when calling productConfiguratorListOptions");
      }
      // verify the required parameter 'pageSize' is set
      if (pageSize === undefined || pageSize === null) {
        throw new Error("Missing the required parameter 'pageSize' when calling productConfiguratorListOptions");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling productConfiguratorListOptions");
      }

      let pathParams = {
        'tenantId': tenantId,
        'stepId': stepId,
        'pageSize': pageSize
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['standardAuthorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OptionListOptionsResponse;
      return this.apiClient.callApi(
        '/v1/{tenantId}/step/{stepId}/page-size/{pageSize}/options', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productConfiguratorUpdateOption operation.
     * @callback module:GeminiCommerce\ProductConfigurator/api/OptionApi~productConfiguratorUpdateOptionCallback
     * @param {String} error Error message, if any.
     * @param {module:GeminiCommerce\ProductConfigurator/model/ProductconfiguratoroptionEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Option
     * Modify an existing option by specifying the tenant and option IDs. Utilize a PUT request with updated option details in the body for seamless customization and fine-tuning of your product configurations.
     * @param {String} tenantId 
     * @param {String} optionId 
     * @param {module:GeminiCommerce\ProductConfigurator/model/ProductconfiguratoroptionUpdateRequest} body 
     * @param {module:GeminiCommerce\ProductConfigurator/api/OptionApi~productConfiguratorUpdateOptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:GeminiCommerce\ProductConfigurator/model/ProductconfiguratoroptionEntity}
     */
    productConfiguratorUpdateOption(tenantId, optionId, body, callback) {
      let postBody = body;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling productConfiguratorUpdateOption");
      }
      // verify the required parameter 'optionId' is set
      if (optionId === undefined || optionId === null) {
        throw new Error("Missing the required parameter 'optionId' when calling productConfiguratorUpdateOption");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling productConfiguratorUpdateOption");
      }

      let pathParams = {
        'tenantId': tenantId,
        'optionId': optionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['standardAuthorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductconfiguratoroptionEntity;
      return this.apiClient.callApi(
        '/v1/{tenantId}/option/{optionId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
