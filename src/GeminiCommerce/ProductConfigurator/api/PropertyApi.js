/**
 * Product Configurator Service
 * ## Introduction  This comprehensive guide will equip you with the knowledge to integrate and leverage our Product Configurator Service in your applications.  ## Quick Start  Get up and running in no time! Follow these steps to kickstart your integration:  1. **Authentication:** Obtain your integration JWT to authenticate your requests. 2. **Client Libraries:** Explore our GitHub repositories to grab client libraries in your preferred programming language. 3. **API Overview:** Familiarize yourself with our RESTful API using the OpenAPI specification.  ## Integration  ### API Overview  Our RESTful API is the gateway to unlocking the full potential of Product Configurator. Check out the detailed [API Reference](/docs/category/configurator) for a granular understanding of each endpoint and request/response format.  ### Client Libraries  To expedite your integration process, we provide client libraries for various programming languages. Find the one that suits your stack in our [GitHub repositories](https://github.com/Gemini-Commerce).  ### Authentication  Security is paramount. Learn how to authenticate your requests using JWT. This ensures a secure and reliable connection between your application and Product Configurator.  ## Configuration Management  ### Configurator Lifecycle  Understand the lifecycle of configurators, from draft to active and deleted. This flexibility allows you to manage configurations at your own pace.  ### Steps and Options  Configure product steps with ease and define options effortlessly. Explore the power of dependencies to create dynamic and intuitive configurations.  ### Matrices  Delve into matricesâ€”your secret weapon. Explore price and weight matrices, and learn how configured steps influence properties and pricing.  ### Price Management  Unleash dynamic pricing with our versatile price matrices. From fixed prices to incremental structures, adapt to diverse pricing models effortlessly.  ## Security  Your data is in safe hands. Discover how Product Configurator ensures security through JWT authentication, safeguarding your sensitive information.  ## Backward Compatibility  Stay ahead of the curve. Learn about our versioning strategy, providing backward compatibility while allowing our service to evolve seamlessly.  ## Developer Support  Have questions? Need assistance? Write to us at [info@gemini-commerce.com](mailto:info@gemini-commerce.com) and we will get back to you.
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GooglerpcStatus from '../model/GooglerpcStatus';
import ProductconfiguratorpropertyBulkCreateRequest from '../model/ProductconfiguratorpropertyBulkCreateRequest';
import ProductconfiguratorpropertyBulkCreateResponse from '../model/ProductconfiguratorpropertyBulkCreateResponse';
import ProductconfiguratorpropertyBulkUpdateRequest from '../model/ProductconfiguratorpropertyBulkUpdateRequest';
import ProductconfiguratorpropertyBulkUpdateResponse from '../model/ProductconfiguratorpropertyBulkUpdateResponse';
import ProductconfiguratorpropertyCreateRequest from '../model/ProductconfiguratorpropertyCreateRequest';
import ProductconfiguratorpropertyEntity from '../model/ProductconfiguratorpropertyEntity';
import ProductconfiguratorpropertyUpdateRequest from '../model/ProductconfiguratorpropertyUpdateRequest';
import PropertyListPropertiesRequest from '../model/PropertyListPropertiesRequest';
import PropertyListPropertiesResponse from '../model/PropertyListPropertiesResponse';

/**
* Property service.
* @module GeminiCommerce\ProductConfigurator/api/PropertyApi
* @version v1
*/
export default class PropertyApi {

    /**
    * Constructs a new PropertyApi. 
    * @alias module:GeminiCommerce\ProductConfigurator/api/PropertyApi
    * @class
    * @param {module:GeminiCommerce\ProductConfigurator/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:GeminiCommerce\ProductConfigurator/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the productConfiguratorBulkCreateProperties operation.
     * @callback module:GeminiCommerce\ProductConfigurator/api/PropertyApi~productConfiguratorBulkCreatePropertiesCallback
     * @param {String} error Error message, if any.
     * @param {module:GeminiCommerce\ProductConfigurator/model/ProductconfiguratorpropertyBulkCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk Create Properties
     * Efficiently add multiple properties to configurations with a bulk create operation. Specify the tenant ID and submit a POST request with the necessary property details in the body for streamlined property management.
     * @param {String} tenantId 
     * @param {module:GeminiCommerce\ProductConfigurator/model/ProductconfiguratorpropertyBulkCreateRequest} body 
     * @param {module:GeminiCommerce\ProductConfigurator/api/PropertyApi~productConfiguratorBulkCreatePropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:GeminiCommerce\ProductConfigurator/model/ProductconfiguratorpropertyBulkCreateResponse}
     */
    productConfiguratorBulkCreateProperties(tenantId, body, callback) {
      let postBody = body;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling productConfiguratorBulkCreateProperties");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling productConfiguratorBulkCreateProperties");
      }

      let pathParams = {
        'tenantId': tenantId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['standardAuthorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductconfiguratorpropertyBulkCreateResponse;
      return this.apiClient.callApi(
        '/v1/{tenantId}/property/create/bulk', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productConfiguratorBulkUpdateProperties operation.
     * @callback module:GeminiCommerce\ProductConfigurator/api/PropertyApi~productConfiguratorBulkUpdatePropertiesCallback
     * @param {String} error Error message, if any.
     * @param {module:GeminiCommerce\ProductConfigurator/model/ProductconfiguratorpropertyBulkUpdateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk Update Properties
     * Effortlessly update multiple properties. Specify the tenant ID and submit a PUT request with the updated property details in the body. Streamline the customization of a multitude of properties in one go.
     * @param {String} tenantId 
     * @param {module:GeminiCommerce\ProductConfigurator/model/ProductconfiguratorpropertyBulkUpdateRequest} body 
     * @param {module:GeminiCommerce\ProductConfigurator/api/PropertyApi~productConfiguratorBulkUpdatePropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:GeminiCommerce\ProductConfigurator/model/ProductconfiguratorpropertyBulkUpdateResponse}
     */
    productConfiguratorBulkUpdateProperties(tenantId, body, callback) {
      let postBody = body;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling productConfiguratorBulkUpdateProperties");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling productConfiguratorBulkUpdateProperties");
      }

      let pathParams = {
        'tenantId': tenantId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['standardAuthorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductconfiguratorpropertyBulkUpdateResponse;
      return this.apiClient.callApi(
        '/v1/{tenantId}/properties/bulk', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productConfiguratorCreateProperty operation.
     * @callback module:GeminiCommerce\ProductConfigurator/api/PropertyApi~productConfiguratorCreatePropertyCallback
     * @param {String} error Error message, if any.
     * @param {module:GeminiCommerce\ProductConfigurator/model/ProductconfiguratorpropertyEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Property
     * Integrate a new property into configurations by specifying the tenant ID. Use a POST request with the required property details in the body for seamless customization and expansion of product configurations.
     * @param {String} tenantId 
     * @param {module:GeminiCommerce\ProductConfigurator/model/ProductconfiguratorpropertyCreateRequest} body 
     * @param {module:GeminiCommerce\ProductConfigurator/api/PropertyApi~productConfiguratorCreatePropertyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:GeminiCommerce\ProductConfigurator/model/ProductconfiguratorpropertyEntity}
     */
    productConfiguratorCreateProperty(tenantId, body, callback) {
      let postBody = body;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling productConfiguratorCreateProperty");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling productConfiguratorCreateProperty");
      }

      let pathParams = {
        'tenantId': tenantId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['standardAuthorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductconfiguratorpropertyEntity;
      return this.apiClient.callApi(
        '/v1/{tenantId}/property/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productConfiguratorListProperties operation.
     * @callback module:GeminiCommerce\ProductConfigurator/api/PropertyApi~productConfiguratorListPropertiesCallback
     * @param {String} error Error message, if any.
     * @param {module:GeminiCommerce\ProductConfigurator/model/PropertyListPropertiesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Properties
     * Retrieve a list of properties for a specific matrix based on tenant and matrix IDs. Customize results by specifying page size for efficient pagination. Submit an empty body to get all properties associated with the matrix.
     * @param {String} tenantId 
     * @param {String} matrixId 
     * @param {String} pageSize 
     * @param {module:GeminiCommerce\ProductConfigurator/model/PropertyListPropertiesRequest} body 
     * @param {module:GeminiCommerce\ProductConfigurator/api/PropertyApi~productConfiguratorListPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:GeminiCommerce\ProductConfigurator/model/PropertyListPropertiesResponse}
     */
    productConfiguratorListProperties(tenantId, matrixId, pageSize, body, callback) {
      let postBody = body;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling productConfiguratorListProperties");
      }
      // verify the required parameter 'matrixId' is set
      if (matrixId === undefined || matrixId === null) {
        throw new Error("Missing the required parameter 'matrixId' when calling productConfiguratorListProperties");
      }
      // verify the required parameter 'pageSize' is set
      if (pageSize === undefined || pageSize === null) {
        throw new Error("Missing the required parameter 'pageSize' when calling productConfiguratorListProperties");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling productConfiguratorListProperties");
      }

      let pathParams = {
        'tenantId': tenantId,
        'matrixId': matrixId,
        'pageSize': pageSize
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['standardAuthorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PropertyListPropertiesResponse;
      return this.apiClient.callApi(
        '/v1/{tenantId}/matrix/{matrixId}/page-size/{pageSize}/properties', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productConfiguratorUpdateProperty operation.
     * @callback module:GeminiCommerce\ProductConfigurator/api/PropertyApi~productConfiguratorUpdatePropertyCallback
     * @param {String} error Error message, if any.
     * @param {module:GeminiCommerce\ProductConfigurator/model/ProductconfiguratorpropertyEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Property
     * Modify an existing property by specifying the tenant and property IDs. Utilize a PUT request with updated property details in the body for seamless customization and fine-tuning of your product configurations.
     * @param {String} tenantId 
     * @param {String} propertyId 
     * @param {module:GeminiCommerce\ProductConfigurator/model/ProductconfiguratorpropertyUpdateRequest} body 
     * @param {module:GeminiCommerce\ProductConfigurator/api/PropertyApi~productConfiguratorUpdatePropertyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:GeminiCommerce\ProductConfigurator/model/ProductconfiguratorpropertyEntity}
     */
    productConfiguratorUpdateProperty(tenantId, propertyId, body, callback) {
      let postBody = body;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling productConfiguratorUpdateProperty");
      }
      // verify the required parameter 'propertyId' is set
      if (propertyId === undefined || propertyId === null) {
        throw new Error("Missing the required parameter 'propertyId' when calling productConfiguratorUpdateProperty");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling productConfiguratorUpdateProperty");
      }

      let pathParams = {
        'tenantId': tenantId,
        'propertyId': propertyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['standardAuthorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductconfiguratorpropertyEntity;
      return this.apiClient.callApi(
        '/v1/{tenantId}/property/{propertyId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
